{"version":3,"file":"component---src-pages-mesh-advanced-extend-resolvers-index-md-08c8c915dd3f001ce8b0.js","mappings":"mSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yBACH,0BACL,kBAAK,2JAAyJ,cAAGC,WAAW,IACxK,KAAQ,+BACL,0BAA8B,MACrC,kBAAK,yHAAuH,cAAGA,WAAW,IACtI,KAAQ,kBACL,YAAgB,MACvB,eACE,GAAM,iFACH,kCAAgC,uBAAYA,WAAW,MAAO,sBAAmC,cAAY,uBAAYA,WAAW,MAAO,yBAChJ,kBAAK,QAAM,uBAAYA,WAAW,KAAM,uBAAoC,qEAC5E,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,wuBA2BP,eACE,GAAM,yBACH,0BACL,oBACE,eAAIA,WAAW,MAAO,gBAAc,uBAAYA,WAAW,MAAO,kBAA+B,MAAI,uBAAYA,WAAW,MAAO,mBAAgC,qCACnK,eAAIA,WAAW,MAAO,gBAAc,uBAAYA,WAAW,MAAO,cAA2B,MAAI,uBAAYA,WAAW,MAAO,kBAA+B,MAAI,uBAAYA,WAAW,MAAO,mBAAgC,mEAChO,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,wBAAqC,qCACvF,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,cAA2B,cAAY,uBAAYA,WAAW,MAAO,wBAAqC,6BAC5J,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,WAAwB,0EAAwE,uBAAYA,WAAW,MAAO,WAAwB,8FACxM,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,YAAyB,sFAAoF,uBAAYA,WAAW,MAAO,YAAyB,kFAExN,eACE,GAAM,2CACH,4CACL,kBAAK,iEAA+D,uBAAYA,WAAW,KAAM,sBAAmC,SAAO,uBAAYA,WAAW,KAAM,uBAAoC,MAC5M,kBAAK,+FAA6F,uBAAYA,WAAW,KAAM,UAAuB,uDAAqD,uBAAYA,WAAW,KAAM,WAAwB,UAChQ,kBAAK,iCAA+B,uBAAYA,WAAW,KAAM,uBAAoC,yCACrG,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,ooDAyDV,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/advanced/extend/resolvers/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"declarative-resolvers\"\n    }}>{`Declarative resolvers`}</h1>\n    <p>{`Declarative resolvers use changes to the mesh configuration to customize resolved values. To make these changes programmatically using JavaScript, see `}<a parentName=\"p\" {...{\n        \"href\": \"./programmatic-resolvers.md\"\n      }}>{`Programmatic resolvers`}</a>{`.`}</p>\n    <p>{`You can also use custom resolvers to batch repeated queries and get better response times. For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"../batching.md\"\n      }}>{`Batching`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"declare-a-resolver-to-the-new-additionaltypedefs-by-using-additionalresolvers\"\n    }}>{`Declare a resolver to the new `}<inlineCode parentName=\"h2\">{`additionalTypeDefs`}</inlineCode>{` by using `}<inlineCode parentName=\"h2\">{`additionalResolvers`}</inlineCode></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`additionalResolvers`}</inlineCode>{` field will make our new field executable in the unified schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"StackExchange\",\n      \"handler\": {\n        \"openapi\": {\n          \"source\": \"https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml\"\n        }\n      }\n    }\n  ],\n  \"additionalTypeDefs\": \"extend type Query {\\\\n  listQuestionsFromStackOverflow(first: Int!): [Question]\\\\n}\\\\n\",\n  \"additionalResolvers\": [\n    {\n      \"targetTypeName\": \"Query\",\n      \"targetFieldName\": \"listQuestionsFromStackOverflow\",\n      \"sourceName\": \"StackExchange\",\n      \"sourceTypeName\": \"Query\",\n      \"sourceFieldName\": \"listQuestions\",\n      \"sourceArgs\": {\n        \"pagesize\": \"{args.first}\"\n      },\n      \"result\": \"items\"\n    }\n  ]\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"configuration-options\"\n    }}>{`Configuration options`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`The target (`}<inlineCode parentName=\"li\">{`targetTypeName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`targetFieldName`}</inlineCode>{`) - describes the queried field.`}</li>\n      <li parentName=\"ul\">{`The source (`}<inlineCode parentName=\"li\">{`sourceName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceTypeName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceFieldName`}</inlineCode>{`) - describes where the data is resolved for the target field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requiredSelectionSet`}</inlineCode>{` fetches the required arguments.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sourceArgs`}</inlineCode>{` maps the `}<inlineCode parentName=\"li\">{`requiredSelectionSet`}</inlineCode>{` argument to the source.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keysArg`}</inlineCode>{` provides the name of the primary key argument. For this example, the `}<inlineCode parentName=\"li\">{`keysArg`}</inlineCode>{` field is the argument name used when sending an array of SKUs to fetch multiple reviews.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keyField`}</inlineCode>{` provides the key-value for each item in the batched query. For this example, the `}<inlineCode parentName=\"li\">{`keyField`}</inlineCode>{` indicates which Product field provides the SKU value to the review service.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"combining-schemas-using-declarative-api\"\n    }}>{`Combining schemas using declarative API`}</h2>\n    <p>{`We learned that we can combine multiple APIs in a mesh using `}<inlineCode parentName=\"p\">{`additionalTypeDefs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`additionalResolvers`}</inlineCode>{`.`}</p>\n    <p>{`The following example has two different OpenAPI sources. We will add two new fields to the `}<inlineCode parentName=\"p\">{`Cities`}</inlineCode>{` type, and those fields have return types from the `}<inlineCode parentName=\"p\">{`Weather`}</inlineCode>{` API.`}</p>\n    <p>{`To achieve this, we will use `}<inlineCode parentName=\"p\">{`additionalResolvers`}</inlineCode>{` inside the mesh configuration file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"Cities\",\n      \"handler\": {\n        \"openapi\": {\n          \"source\": \"https://api.apis.guru/v2/specs/mashape.com/geodb/1.0.0/swagger.json\",\n          \"operationHeaders\": {\n            \"X-RapidAPI-Key\": \"a12b3c456defg78hij9kl0123m4no5pqr6stuv789wxyz01a23\"\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"Weather\",\n      \"handler\": {\n        \"openapi\": {\n          \"source\": \"https://api.apis.guru/v2/specs/weatherbit.io/2.0.0/swagger.json\"\n        }\n      }\n    }\n  ],\n  \"additionalTypeDefs\": \"extend type PopulatedPlaceSummary {\\\\n  dailyForecast: [Forecast]\\\\n  todayForecast: Forecast\\\\n}\\\\n\",\n  \"additionalResolvers\": [\n    {\n      \"targetTypeName\": \"PopulatedPlaceSummary\",\n      \"targetFieldName\": \"dailyForecast\",\n      \"requiredSelectionSet\": \"{\\\\n  latitude\\\\n  longitude\\\\n}\\\\n\",\n      \"sourceName\": \"Weather\",\n      \"sourceTypeName\": \"Query\",\n      \"sourceFieldName\": \"getForecastDailyLatLatLonLon\",\n      \"sourceArgs\": {\n        \"lat\": \"{root.latitude}\",\n        \"lon\": \"{root.longitude}\",\n        \"key\": \"{context.headers['x-weather-api-key']}\"\n      },\n      \"result\": \"data\"\n    },\n    {\n      \"type\": \"PopulatedPlaceSummary\",\n      \"field\": \"todayForecast\",\n      \"requiredSelectionSet\": \"{\\\\n  latitude\\\\n  longitude\\\\n}\\\\n\",\n      \"sourceName\": \"Weather\",\n      \"sourceTypeName\": \"Query\",\n      \"sourceFieldName\": \"getForecastDailyLatLatLonLon\",\n      \"sourceArgs\": {\n        \"lat\": \"{root.latitude}\",\n        \"lon\": \"{root.longitude}\",\n        \"key\": \"{context.headers['x-weather-api-key']}\"\n      },\n      \"result\": \"data[0]\"\n    }\n  ]\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}