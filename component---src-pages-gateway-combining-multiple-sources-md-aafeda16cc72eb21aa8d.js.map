{"version":3,"file":"component---src-pages-gateway-combining-multiple-sources-md-aafeda16cc72eb21aa8d.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/gateway/combining-multiple-sources.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"combining-multiple-sources\"\n    }}>{`Combining Multiple Sources`}</h1>\n    <p>{`This document refers to the \"Books\", \"Authors\" and \"Stores\" example API, available in a dedicated repository: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/charlypoly/graphql-mesh-docs-first-gateway\"\n      }}><inlineCode parentName=\"a\">{`graphql-mesh-docs-first-gateway`}</inlineCode></a>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Books API (REST API)`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`GET /books`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`GET /books/:id`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`GET /categories`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Authors API (gRPC API)`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`GetAuthor`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ListAuthors`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Stores (GraphQL API)`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stores`}</inlineCode>{` Query`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bookSells(storeId: ID!)`}</inlineCode>{` Query`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`This guide will show how to add 2 new sources (Authors and Stores) to achieve the following Gateway setup:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/graphql-mesh-gateway/assets/5a1483dc35f1962452d6d966c4ef129e/book-example.svg\",\n        \"alt\": \"example\"\n      }}></img></p>\n    <p>{`In addition to adding new sources, we can shape the Unified Schema to accept the following query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query bestSellersByStore {\n  stores {\n    id\n    name\n    bookSells {\n      sellsCount\n      book {\n        id\n        title\n        author {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"1-add-the-authors-source\"\n    }}>{`1. Add the \"Authors\" Source`}</h2>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`API Mesh for Adobe Developer App Builder does not currently support the `}<inlineCode parentName=\"p\">{`gRPC`}</inlineCode>{` handler.`}</p>\n    <p>{`The \"Authors\" Source is a gRPC API: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/charlypoly/graphql-mesh-docs-first-gateway/tree/master/packages/authors-service\"\n      }}><inlineCode parentName=\"a\">{`authors-service`}</inlineCode></a>{`.`}</p>\n    <p>{`We will use the `}<inlineCode parentName=\"p\">{`grpc`}</inlineCode>{` Handler with the `}<inlineCode parentName=\"p\">{`@graphql-mesh/grpc`}</inlineCode>{` package and configure it in our `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/charlypoly/graphql-mesh-docs-first-gateway/tree/master/packages/multiple-sources/.meshrc.yaml\"\n      }}><inlineCode parentName=\"a\">{`mesh`}</inlineCode></a>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": [\n        {\n            \"name\": \"Books\",\n            \"handler\": {\n                \"openapi\": {\n                    \"baseUrl\": \"<your_url>\",\n                    \"source\": \"../books-service/openapi3-definition.json\"\n                }\n            }\n        },\n        {\n            \"name\": \"Authors\",\n            \"handler\": {\n                \"grpc\": {\n                    \"endpoint\": \"<your_url>\",\n                    \"protoFilePath\": \"../authors-service/proto/authors/v1/authors_service.proto\"\n                }\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <p>{`Similar to the \"Books\" API configuration, we just need to provide the path to the service definition file (here, a Proto file) and the base URL.`}</p>\n    <p>{`We will \"clean\" the corresponding \"Authors\" GraphQL Schema later, in the 3rd step, `}<a parentName=\"p\" {...{\n        \"href\": \"#3-shaping-the-unified-schema\"\n      }}>{`Shaping the Unified Schema`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"2-add-the-stores-source\"\n    }}>{`2. Add the \"Stores\" Source`}</h2>\n    <p>{`The \"Stores\" Source is a GraphQL API: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/charlypoly/graphql-mesh-docs-first-gateway/tree/master/packages/stores-service\"\n      }}><inlineCode parentName=\"a\">{`stores-service`}</inlineCode></a>{`.`}</p>\n    <p>{`We will use the `}<inlineCode parentName=\"p\">{`graphql`}</inlineCode>{` Handler with the `}<inlineCode parentName=\"p\">{`@graphql-mesh/graphql`}</inlineCode>{` package and configure it in our `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/charlypoly/graphql-mesh-docs-first-gateway/tree/master/packages/multiple-sources/.meshrc.yaml\"\n      }}><inlineCode parentName=\"a\">{`mesh`}</inlineCode></a>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": [\n        {\n            \"name\": \"Books\",\n            \"handler\": {\n                \"openapi\": {\n                    \"baseUrl\": \"<your_url>\",\n                    \"source\": \"../books-service/openapi3-definition.json\"\n                }\n            }\n        },\n        {\n            \"name\": \"Authors\",\n            \"handler\": {\n                \"grpc\": {\n                    \"endpoint\": \"<your_url>\",\n                    \"protoFilePath\": \"../authors-service/proto/authors/v1/authors_service.proto\"\n                }\n            }\n        },\n        {\n            \"name\": \"Stores\",\n            \"handler\": {\n                \"graphql\": {\n                    \"endpoint\": \"https://my-service-url/graphql\"\n                }\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <p>{`Since `}<inlineCode parentName=\"p\">{`Stores`}</inlineCode>{` is a GraphQL API, Mesh can leverage introspection to get its schema with just the `}<inlineCode parentName=\"p\">{`endpoint`}</inlineCode>{` URL.`}</p>\n    <h2 {...{\n      \"id\": \"3-shaping-the-unified-schema\"\n    }}>{`3. Shaping the Unified Schema`}</h2>\n    <p>{`The following Mesh Gateway configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": [\n        {\n            \"name\": \"Books\",\n            \"handler\": {\n                \"openapi\": {\n                    \"baseUrl\": \"<your_url>\",\n                    \"source\": \"../books-service/openapi3-definition.json\"\n                }\n            }\n        },\n        {\n            \"name\": \"Authors\",\n            \"handler\": {\n                \"grpc\": {\n                    \"endpoint\": \"<your_url>\",\n                    \"protoFilePath\": \"../authors-service/proto/authors/v1/authors_service.proto\"\n                }\n            }\n        },\n        {\n            \"name\": \"Stores\",\n            \"handler\": {\n                \"graphql\": {\n                    \"endpoint\": \"https://my-service-url/graphql\"\n                }\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <p>{`Will give us a \"raw\" GraphQL schema design that contains unwanted GraphQL Queries, badly named types, and a lack of hierarchy:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  book(id: String!): Book\n\n  books(\n    limit: Int\n  ): [Book]\n\n  categories(\n    limit: Int\n  ): [Category]\n  authors_v1_AuthorsService_GetAuthor(input: authors_v1_GetAuthorRequest_Input): authors_v1_Author\n  authors_v1_AuthorsService_ListAuthors(input: authors_v1_ListAuthorsRequest_Input): authors_v1_ListAuthorsResponse\n  authors_v1_AuthorsService_connectivityState(tryToConnect: Boolean): ConnectivityState\n  stores: [Store!]!\n  bookSells(storeId: ID!): [Sells!]!\n}\n# ...\n`}</code></pre>\n    <p>{`To achieve a clean Unified Schema design that would allow the following Query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query bestSellersByStore {\n  stores {\n    id\n    name\n    bookSells {\n      sellsCount\n      book {\n        id\n        title\n        author {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`We will need to configure multiple transforms:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Rename the \"Authors\" queries`}</li>\n      <li parentName=\"ul\">{`Remove the unnecessary root queries: `}<inlineCode parentName=\"li\">{`author`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`book`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`categories`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`bookSells`}</inlineCode></li>\n      <li parentName=\"ul\">{`Setup some hierarchy between the queries`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"remove-unnecessary-root-queries\"\n    }}>{`Remove unnecessary Root queries`}</h3>\n    <p>{`To build a clean Unified Schema, we need to remove unnecessary Queries such as:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Query.authors_v1_AuthorsService_GetAuthor`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Query.authors_v1_AuthorsService_ListAuthors`}</inlineCode>{` from the \"Authors\" Source`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`Query.!authors_v1_AuthorsService_connectivityState`}</inlineCode>{` is automatically generated by the `}<inlineCode parentName=\"li\">{`grpc`}</inlineCode>{` handler of the \"Authors\" Source`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Query.book`}</inlineCode>{` from the \"Books\" Source`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Query.bookSells`}</inlineCode>{` from the \"Stores\" Source`}</li>\n    </ul>\n    <p>{`Our updated `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/charlypoly/graphql-mesh-docs-first-gateway/tree/master/packages/multiple-sources/.meshrc.yaml\"\n      }}><inlineCode parentName=\"a\">{`mesh`}</inlineCode></a>{` is the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": [\n        {\n            \"name\": \"Books\",\n            \"handler\": {\n                \"openapi\": {\n                    \"baseUrl\": \"<your_url>\",\n                    \"source\": \"../books-service/openapi3-definition.json\"\n                }\n            }\n        },\n        {\n            \"name\": \"Authors\",\n            \"handler\": {\n                \"grpc\": {\n                    \"endpoint\": \"<your_url>\",\n                    \"protoFilePath\": \"../authors-service/proto/authors/v1/authors_service.proto\"\n                }\n            }\n        },\n        {\n            \"name\": \"Stores\",\n            \"handler\": {\n                \"graphql\": {\n                    \"endpoint\": \"https://my-service-url/graphql\"\n                }\n            }\n        }\n    ],\n    \"transforms\": [\n        {\n            \"filterSchema\": {\n                \"filters\": [\n                    \"Query.!authors_v1_AuthorsService_connectivityState\",\n                    \"Query.!{authors_v1_AuthorsService_GetAuthor, book, bookSells, categories}\"\n                ]\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`filterSchema`}</inlineCode>{` takes a `}<inlineCode parentName=\"p\">{`filters`}</inlineCode>{` option that accepts an array of filter rules.`}</p>\n    <p>{`By adding `}<inlineCode parentName=\"p\">{`Query.!authors_v1_AuthorsService_connectivityState`}</inlineCode>{`, we instruct Mesh to remove the `}<inlineCode parentName=\"p\">{`authors_v1_AuthorsService_connectivityState(...)`}</inlineCode>{` Query.`}</p>\n    <p>{`Notice that the `}<a parentName=\"p\" {...{\n        \"href\": \"transforms/filter-schema.md\"\n      }}><inlineCode parentName=\"a\">{`filterSchema`}</inlineCode></a>{` allows using a bash-like syntax to avoid repetitive configuration with the `}<inlineCode parentName=\"p\">{`{..., ...}`}</inlineCode>{` syntax.`}</p>\n    <p>{`Alternatively, you could instruct Mesh to only keep the `}<inlineCode parentName=\"p\">{`Query.stores`}</inlineCode>{` root query as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": null,\n    \"transforms\": [\n        {\n            \"filterSchema\": {\n                \"filters\": [\n                    \"Query.stores\"\n                ]\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setup-hierarchy-with-nested-queries\"\n    }}>{`Setup hierarchy with nested queries`}</h3>\n    <p>{`To support the following Query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query bestSellersByStore {\n  stores {\n    id\n    name\n    bookSells {\n      sellsCount\n      book {\n        id\n        title\n        author {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`We need to update the schema to add the following fields:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Store.bookSells: [Sells!]!`}</inlineCode>{`: to get the selling from a given store`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Sells.book: Book`}</inlineCode>{`: to get the book of a given store selling record`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Book.author: authors_v1_Author`}</inlineCode>{`: to get the author of a book`}</li>\n    </ul>\n    <p>{`To achieve this, we will use the `}<inlineCode parentName=\"p\">{`additionalResolvers`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`additionalTypeDefs`}</inlineCode>{` configuration from Mesh's `}<inlineCode parentName=\"p\">{`mesh.json`}</inlineCode>{` API.`}</p>\n    <h4 {...{\n      \"id\": \"update-our-schema-with-new-fields\"\n    }}>{`Update our Schema with new fields`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`additionalTypeDefs`}</inlineCode>{` configuration parameter allows you to merge GraphQL with the Unified Schema definition and `}<a parentName=\"p\" {...{\n        \"href\": \"https://spec.graphql.org/June2018/#sec-Object-Extensions\"\n      }}>{`extend existing types`}</a>{` and queries.`}</p>\n    <p>{`If we want to add the `}<inlineCode parentName=\"p\">{`Book.author`}</inlineCode>{` field, we first need to know what is the type of Author.`}</p>\n    <p>{`Since the handlers generate most types, it might be hard to guess their correct spelling (e.g. `}<inlineCode parentName=\"p\">{`authors_v1_Author`}</inlineCode>{`). A quick way to build an `}<inlineCode parentName=\"p\">{`additionalTypeDefs`}</inlineCode>{` is to refer to the generated GraphQL Schema file of each Source.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`schema {\n  query: Query\n}\n\ntype Query {\n  authors_v1_AuthorsService_GetAuthor(input: authors_v1_GetAuthorRequest_Input): authors_v1_Author\n  authors_v1_AuthorsService_ListAuthors(input: authors_v1_ListAuthorsRequest_Input): authors_v1_ListAuthorsResponse\n  authors_v1_AuthorsService_connectivityState(tryToConnect: Boolean): ConnectivityState\n}\n\ntype authors_v1_Author {\n  id: String\n  name: String\n  editor: String\n}\n\ninput authors_v1_GetAuthorRequest_Input {\n  id: String\n}\n\ntype authors_v1_ListAuthorsResponse {\n  items: [authors_v1_Author]\n}\n\nscalar authors_v1_ListAuthorsRequest_Input @specifiedBy(url: \"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\")\n\nenum ConnectivityState {\n  IDLE\n  CONNECTING\n  READY\n  TRANSIENT_FAILURE\n  SHUTDOWN\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If the `}<inlineCode parentName=\"p\">{`.mesh`}</inlineCode>{` directory does not exist, try running the gateway first.`}</p>\n    <p>{`Here we add the `}<inlineCode parentName=\"p\">{`authors_v1_Author`}</inlineCode>{` GraphQL type that describes the author to `}<inlineCode parentName=\"p\">{`additionalTypeDefs`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": null,\n    \"transforms\": [\n        {\n            \"filterSchema\": {\n                \"filters\": [\n                    \"Query.stores\"\n                ]\n            }\n        }\n    ],\n    \"additionalTypeDefs\": \"extend type Book {\\\\n  author: authors_v1_Author\\\\n}\\\\n\"\n}\n`}</code></pre>\n    <p>{`By applying the same process for `}<inlineCode parentName=\"p\">{`Store.bookSells`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Sells.book`}</inlineCode>{`, we get the following final `}<inlineCode parentName=\"p\">{`additionalTypeDefs`}</inlineCode>{` configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": null,\n    \"transforms\": [\n        {\n            \"filterSchema\": {\n                \"filters\": [\n                    \"Query.stores\"\n                ]\n            }\n        }\n    ],\n    \"additionalTypeDefs\": \"extend type Store {\\\\n  bookSells: [Sells!]!\\\\n}\\\\nextend type Sells {\\\\n  book: Book\\\\n}\\\\nextend type Book {\\\\n  author: authors_v1_Author\\\\n}\\\\n\"\n}\n`}</code></pre>\n    <p>{`Now that we have updated the Unified Schema definition, we need to indicate to the Mesh how to resolve our new field's data.`}</p>\n    <h4 {...{\n      \"id\": \"add-resolvers-for-our-new-fields\"\n    }}>{`Add resolvers for our new fields`}</h4>\n    <p>{`Let's describe how the Mesh should resolve the data on the newly added type definitions by providing `}<inlineCode parentName=\"p\">{`additionalResolvers`}</inlineCode>{`.`}</p>\n    <p>{`We need the `}<inlineCode parentName=\"p\">{`Book.author`}</inlineCode>{` field to call the `}<inlineCode parentName=\"p\">{`Query.authors_v1_AuthorsService_GetAuthor(input: authors_v1_GetAuthorRequest_Input): authors_v1_Author`}</inlineCode>{` Query by providing the following `}<inlineCode parentName=\"p\">{`additionalResolvers`}</inlineCode>{` configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": null,\n    \"transforms\": [\n        {\n            \"filterSchema\": {\n                \"filters\": [\n                    \"Query.stores\"\n                ]\n            }\n        }\n    ],\n    \"additionalTypeDefs\": \"extend type Store {\\\\n  bookSells: [Sells!]!\\\\n}\\\\nextend type Sells {\\\\n  book: Book\\\\n}\\\\nextend type Book {\\\\n  author: authors_v1_Author\\\\n}\\\\n\",\n    \"additionalResolvers\": [\n        {\n            \"targetTypeName\": \"Book\",\n            \"targetFieldName\": \"author\",\n            \"sourceName\": \"Authors\",\n            \"sourceTypeName\": \"Query\",\n            \"sourceFieldName\": \"authors_v1_AuthorsService_GetAuthor\",\n            \"requiredSelectionSet\": \"{\\\\n  authorId\\\\n}\\\\n\",\n            \"sourceArgs\": {\n                \"input.id\": \"{root.authorId}\"\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <p>{`Each `}<inlineCode parentName=\"p\">{`additionalResolvers`}</inlineCode>{` value is based on 2 main concepts:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`target`}</strong>{` (`}<inlineCode parentName=\"li\">{`targetTypeName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`targetFieldName`}</inlineCode>{`) describes the queried field.`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`source`}</strong>{` (`}<inlineCode parentName=\"li\">{`sourceName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceTypeName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceFieldName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceArgs`}</inlineCode>{`) describes where the data is resolved for the target field.`}</li>\n    </ul>\n    <p>{`Here we have configured the `}<strong parentName=\"p\">{`target`}</strong>{` and `}<strong parentName=\"p\">{`Source`}</strong>{` so that Querying `}<inlineCode parentName=\"p\">{`Book.author`}</inlineCode>{` will resolve the data by calling the `}<inlineCode parentName=\"p\">{`Query.authors_v1_AuthorsService_GetAuthor`}</inlineCode>{` from the \"Authors\" source.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`requiredSelectionSet`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sourceArgs`}</inlineCode>{` ensure that the required arguments are provided (`}<inlineCode parentName=\"p\">{`requiredSelectionSet`}</inlineCode>{`) and adequately mapped to the Source (`}<inlineCode parentName=\"p\">{`sourceArgs`}</inlineCode>{`).`}</p>\n    <p><inlineCode parentName=\"p\">{`requiredSelectionSet`}</inlineCode>{` ensures that the `}<inlineCode parentName=\"p\">{`Book.author`}</inlineCode>{` selection will contain the `}<inlineCode parentName=\"p\">{`authorId`}</inlineCode>{`, so it can be forwarded to `}<inlineCode parentName=\"p\">{`Query.authors_v1_AuthorsService_GetAuthor`}</inlineCode>{` as the `}<inlineCode parentName=\"p\">{`input.id`}</inlineCode>{` argument.`}</p>\n    <p>{`Applying the same logic to `}<inlineCode parentName=\"p\">{`Stores.bookSells`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Sells.book`}</inlineCode>{` gives us a complete `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/charlypoly/graphql-mesh-docs-first-gateway/tree/master/packages/multiple-sources/.meshrc.yaml\"\n      }}><inlineCode parentName=\"a\">{`mesh`}</inlineCode></a>{` configuration.`}</p>\n    <p>{`Our Gateway is now complete. You can start it (along with the Services APIs) by running:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn start-multiple-sources\n`}</code></pre>\n    <p>{`The following query will now properly resolve all fields:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query bestSellersByStore {\n  stores {\n    id\n    name\n    bookSells {\n      sellsCount\n      book {\n        id\n        title\n        author {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The query returns the correct data:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"stores\": [\n      {\n        \"id\": \"0\",\n        \"name\": \"Library\",\n        \"bookSells\": [\n          {\n            \"bookId\": \"0\",\n            \"sellsCount\": 1234,\n            \"book\": {\n              \"title\": \"Adobe\",\n              \"author\": {\n                \"name\": \"John Warnock and Charles Geschke\"\n              }\n            }\n          },\n          {\n            \"bookId\": \"1\"\n            ...\n          }\n        ]\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <p>{`Congrats! You are now familiar with the basics of shaping the Unified Schema with `}<inlineCode parentName=\"p\">{`additionalTypeDefs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`additionalResolvers`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}