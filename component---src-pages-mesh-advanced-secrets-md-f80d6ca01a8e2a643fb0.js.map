{"version":3,"file":"component---src-pages-mesh-advanced-secrets-md-f80d6ca01a8e2a643fb0.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/advanced/secrets.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"secrets-management\"\n    }}>{`Secrets management`}</h1>\n    <p>{`API Mesh for Adobe Developer App Builder allows you to manage secrets for a mesh. You can use these secrets in your mesh configuration file to securely manage sensitive information. When creating or updating a mesh, you can provide a separate file that defines your secrets. API Mesh encrypts secrets using AES 512-bit encryption.`}</p>\n    <p>{`For security purposes, you cannot receive the secrets once you define them when creating or updating a mesh. For example, running an `}<inlineCode parentName=\"p\">{`aio api-mesh get`}</inlineCode>{` command returns your mesh with the values defined within the mesh configuration file, such as `}<inlineCode parentName=\"p\">{`{context.secrets.SECRET}`}</inlineCode>{` and does not return the actual secret's value.`}</p>\n    <h2 {...{\n      \"id\": \"create-a-secrets-file\"\n    }}>{`Create a secrets file`}</h2>\n    <p>{`Create a YAML file, such as `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{`, to define your secrets. The file name must end with the `}<inlineCode parentName=\"p\">{`yaml`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yml`}</inlineCode>{` file extension. Each line in the files defines a different secret.`}</p>\n    <p>{`The following example contains a Bash variable as a value for the `}<inlineCode parentName=\"p\">{`TOKEN`}</inlineCode>{` secret. API Mesh supports strings and numbers with or without single or double quotes and Bash variables with or without brackets, such as `}<inlineCode parentName=\"p\">{`$TOKEN`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`$[TOKEN]`}</inlineCode>{`.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Bash variables are not supported in Windows.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`TOKEN: $TOKEN\nUSERNAME: user-name\nadminname: 'admin-name'\nAEM_USERNAME: \"user-name\"\n\nAPI_KEY: \\${COMMERCE_API_KEY}\nAPI_KEY2: $COMMERCE_API_KEY\n`}</code></pre>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You must escape a literal `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` character in the secrets file. If the `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` is not part of a Bash variable, escape it with a backslash (`}<inlineCode parentName=\"p\">{`\\\\`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`SECRET: \\\\$SECRET`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"add-secrets-to-your-mesh-configuration-file\"\n    }}>{`Add secrets to your mesh configuration file`}</h2>\n    <p>{`Once you have created your `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file, you can reference the secrets in your mesh configuration file. You can use secrets in the following locations:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Headers`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Operational headers`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`JavaScript files`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Local hooks`}</li>\n          <li parentName=\"ul\">{`Additional resolvers`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`When using secrets with operational headers, use the template literals syntax, for example, `}<inlineCode parentName=\"p\">{`{context.secrets.<SECRET_NAME>}`}</inlineCode>{`.`}</p>\n    <p>{`When using secrets in JavaScript files using hooks or resolvers, use the secret in context, for example, `}<inlineCode parentName=\"p\">{`const secretValue = context.secrets.<SECRET_NAME>`}</inlineCode>{`.`}</p>\n    <p>{`The following file provides an example using operational headers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Adobe Commerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"venia.magento.com/graphql\",\n            \"operationHeaders\": {\n              \"secret\": \"{context.secrets.<secret-name>}\"\n            }\n          }\n        }\n      }\n    ],\n  }\n}\n`}</code></pre>\n    <p>{`For more complex use cases, see `}<a parentName=\"p\" {...{\n        \"href\": \"#examples\"\n      }}>{`Examples`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"create-or-update-your-mesh-secrets\"\n    }}>{`Create or update your mesh secrets`}</h2>\n    <p>{`When you create or update a mesh that you want to include secrets in, add the `}<inlineCode parentName=\"p\">{`--secrets`}</inlineCode>{` flag followed by the path to your secrets file. If you do not provide the secrets file when updating a mesh that has secrets, the secrets\\` values are overwritten by their literal references.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"bash, bash\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"create\"\n    }}>{`Create`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`aio api-mesh create mesh.json --secrets secrets.yaml\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"update\"\n    }}>{`Update`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`aio api-mesh update mesh.json --secrets secrets.yaml\n`}</code></pre>\n    <p>{`Your mesh now contains the secrets defined in your `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The following examples demonstrate different use cases in which using secrets management is beneficial.`}</p>\n    <h3 {...{\n      \"id\": \"header-reflection\"\n    }}>{`Header reflection`}</h3>\n    <p>{`The following example mesh configuration uses a header reflection service to demonstrate how you can pass your secrets as headers. This can be useful to test and debug your configuration.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Do not use sensitive data with this example, since it is designed to display your secrets as headers.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getHeadersSchema.json`}</inlineCode>{` tab contains the JSON file referenced in the example mesh's `}<inlineCode parentName=\"p\">{`operations`}</inlineCode>{` object. This file provides the required response schema. Copy the file into the same folder as your `}<inlineCode parentName=\"p\">{`mesh.json`}</inlineCode>{` file before creating or updating your mesh.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"json, yaml, json\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"meshjson\"\n    }}><inlineCode parentName=\"h4\">{`mesh.json`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"headersData\",\n        \"handler\": {\n          \"JsonSchema\": {\n            \"baseUrl\": \"<header-reflection-service>\",\n            \"operations\": [\n              {\n                \"type\": \"Query\",\n                \"field\": \"data\",\n                \"path\": \"/\",\n                \"method\": \"GET\",\n                \"responseSchema\": \"./getHeadersSchema.json\"\n              }\n            ],\n            \"operationHeaders\": {\n              \"secretHeader\": \"{context.secrets.API_KEY}\",\n              \"secretAEMHeader\": \"{context.secrets.TOKEN}\"\n            }\n          }\n        }\n      }\n    ],\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"secretsyaml\"\n    }}><inlineCode parentName=\"h4\">{`secrets.yaml`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`TOKEN: \"my-token\"\nAEMUSERNAME: \"user-name\"\nadminname: \"admin-name\"\n\nAPI_KEY: $COMMERCE_API_KEY\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"getheadersschemajson\"\n    }}><inlineCode parentName=\"h4\">{`getHeadersSchema.json`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [\n    \"headerKeys\",\n    \"headerValues\",\n    \"headers\"\n  ],\n  \"properties\": {\n    \"headerKeys\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"headerValues\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"headers\": {\n      \"type\": \"object\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Use the following GraphQL query to retrieve the headers. This query will vary depending on the header reflection service you are using.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"json, json\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"graphql\"\n    }}>{`GraphQL`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  data {\n    headers\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"response\"\n    }}>{`Response`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"data\": {\n      \"headers\": {\n        \"accept-encoding\": \"gzip, br\",\n        \"cf-connecting-ip\": \"0.0.0.0\",\n        \"cf-ipcountry\": \"US\",\n        \"cf-ray\": \"abc123abc123\",\n        \"cf-visitor\": \"{\\\\\"scheme\\\\\":\\\\\"https\\\\\"}\",\n        \"connection\": \"Keep-Alive\",\n        \"host\": \"header-reflection-service\",\n        \"secretaemeader\": \"abcabcdefdefxyzxyz\",\n        \"secretheader\": \"\\\\\\\\/root\",\n        \"x-forwarded-proto\": \"https\",\n        \"x-real-ip\": \"0.0.0.0\"\n      }\n    }\n  },\n  \"extensions\": {}\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"authorization\"\n    }}>{`Authorization`}</h3>\n    <p>{`The following example provides a simple authorization test. This mesh only returns a valid response, if the `}<inlineCode parentName=\"p\">{`TOKEN`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file is also passed as an authorization header in the request. If the token does not match, the mesh will return an unauthorized error.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`hooks.js`}</inlineCode>{` tab contains the JavaScript file referenced in the example mesh's `}<inlineCode parentName=\"p\">{`plugins`}</inlineCode>{` object. This file provides the required composer. Copy the file into the same folder as your `}<inlineCode parentName=\"p\">{`mesh.json`}</inlineCode>{` file before creating or updating your mesh.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"json, yaml, javascript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"meshjson-1\"\n    }}><inlineCode parentName=\"h4\">{`mesh.json`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Commerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      }\n    ],\n    \"plugins\": [\n      {\n        \"hooks\": {\n          \"beforeAll\": {\n            \"composer\": \"./hooks.js#isAuth\",\n            \"blocking\": true\n          }\n        }\n      }\n    ],\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"secretsyaml-1\"\n    }}><inlineCode parentName=\"h4\">{`secrets.yaml`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`TOKEN: \"abcabcdefdefxyzxyz\"\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"hooksjs\"\n    }}><inlineCode parentName=\"h4\">{`hooks.js`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`module.exports = {\n    isAuth: ({\n        context\n    }) => {\n        const {\n            headers,\n            secrets\n        } = context;\n\n        if (headers.authorization != secrets.TOKEN) {\n            return {\n                status: \"ERROR\",\n                message: \"Unauthorized\",\n            };\n        } else {\n            return {\n                status: \"SUCCESS\",\n                message: \"Authorized\",\n            };\n        }\n    },\n};\n`}</code></pre>\n    <p>{`After adding the token from the `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file to your authorization header, run the following query:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"json, json, json\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"query\"\n    }}>{`Query`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  storeConfig {\n    base_url\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"authorized-response\"\n    }}>{`Authorized response`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"storeConfig\": {\n      \"base_url\": \"https://www.example.com\"\n    }\n  },\n  \"extensions\": {}\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"unauthorized-response\"\n    }}>{`Unauthorized response`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": null,\n  \"errors\": [\n    \"Unauthorized\"\n  ]\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}