{"version":3,"file":"component---src-pages-reference-transforms-prefix-md-4340d5b85aac1df9d012.js","mappings":"sNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,qBACL,uBAAYC,WAAW,MAAvB,UAFH,eAGA,0BAAW,uBAAYA,WAAW,KAAvB,UAAX,qFAAkJ,uBAAYA,WAAW,KAAvB,kBAAlJ,OAAmN,uBAAYA,WAAW,KAAvB,UAAnN,mBAAwR,cAAGA,WAAW,IAClS,KAAQ,iDACP,uBAAYA,WAAW,KAAvB,WAFL,sJAGe,uBAAYA,WAAW,KAAvB,UAHf,MAGuE,uBAAYA,WAAW,KAAvB,UAHvE,gDAGyK,uBAAYA,WAAW,KAAvB,UAHzK,2BAIA,yGACA,eACE,GAAM,SADR,UAGA,qDAAsC,uBAAYA,WAAW,KAAvB,aAAtC,gDACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,8ZAyBL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,4CAA6B,uBAAYC,WAAW,KAAvB,QAA7B,SAAsF,uBAAYA,WAAW,KAAvB,QAAtF,qBAA2J,cAAGA,WAAW,IACrK,KAAQ,2EAD+I,qBAA3J,MAGA,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,MAA0I,uBAAYA,WAAW,MAAvB,QAA1I,OAAkM,uBAAYA,WAAW,MAAvB,QAAlM,yFACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,SAApB,YAAkF,uBAAYA,WAAW,MAAvB,UAAlF,yFACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,YAAmF,uBAAYA,WAAW,MAAvB,mBAAnF,wCACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,yBAApB,YAAkG,uBAAYA,WAAW,MAAvB,WAAlG,wEACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,gBAApB,YAAyF,uBAAYA,WAAW,MAAvB,WAAzF,sCAIL,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/reference/transforms/prefix.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"prefix-transform\"\n    }}><inlineCode parentName=\"h1\">{`prefix`}</inlineCode>{` transform`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{` transform allows you to prefix GraphQL types and GraphQL root operations (under `}<inlineCode parentName=\"p\">{`Query/Mutation`}</inlineCode>{`). `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{` is similar to `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/docs/transforms/rename\"\n      }}><inlineCode parentName=\"a\">{`rename`}</inlineCode></a>{` in that it allows you to modify names to avoid conflicts, simplify complicated names, and change the appearance of your query.\nIn contrast with `}<inlineCode parentName=\"p\">{`rename`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{` is simpler and only allows you to append a `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{` to the existing name.`}</p>\n    <p>{`You can use it to easily \"namespace\" APIs in your unified API and avoid conflicts.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The following example adds the `}<inlineCode parentName=\"p\">{`commerce_`}</inlineCode>{` prefix to all Adobe Commerce source types:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"AdobeCommerce\",\n        \"transforms\": [\n          {\n            \"prefix\": {\n              \"mode\": \"wrap\",\n              \"value\": \"commerce_\"\n            }\n          }\n        ],\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about `}<inlineCode parentName=\"p\">{`bare`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` modes, read the `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes\"\n      }}>{`dedicated section`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mode`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`bare`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`wrap`}</inlineCode>{`)) - Specify to apply prefix transform to bare schema or by wrapping original schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - The prefix to apply to the schema types. By default, the prefix is the API name.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ignore`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of String`}</inlineCode>{`, required) - List of ignored types`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`includeRootOperations`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`) - Changes root types and changes the field names (default: false)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`includeTypes`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`) - Changes types (default: true)`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}