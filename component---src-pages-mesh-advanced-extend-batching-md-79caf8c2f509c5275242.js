"use strict";(self.webpackChunkgraphql_mesh_gateway=self.webpackChunkgraphql_mesh_gateway||[]).push([[4575],{33433:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return l},default:function(){return h}});var t=a(58168),i=a(80045),r=(a(88763),a(15680)),s=a(83407);const o=["components"],l={},d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",n)},m=d("InlineAlert"),p=d("CodeBlock"),u={_frontmatter:l},c=s.A;function h(e){let{components:n}=e,a=(0,i.A)(e,o);return(0,r.mdx)(c,(0,t.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"batching-with-api-mesh-for-adobe-developer-app-builder"},"Batching with API Mesh for Adobe Developer App Builder"),(0,r.mdx)("p",null,"Batching allows you to combine a group of requests into a single request, turning multiple queries into a single one. Compared to sending multiple queries simultaneously, batched requests result in better response times. They also avoid issues with rate-limiting."),(0,r.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Batching is only possible if the APIs included in your mesh support batching."),(0,r.mdx)("p",null,"The following graphics depict the difference between queries with batched and unbatched calls:"),(0,r.mdx)("h2",{id:"unbatched"},"Unbatched"),(0,r.mdx)("p",null,"If your sources do not support batching, each query runs separately."),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"359px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"60.62500000000001%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/5530d/unbatched.webp 320w","/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/e956e/unbatched.webp 359w"],sizes:"(max-width: 359px) 100vw, 359px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/dd4a7/unbatched.png 320w","/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/16540/unbatched.png 359w"],sizes:"(max-width: 359px) 100vw, 359px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/16540/unbatched.png",alt:"unbatched",title:"unbatched",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("h2",{id:"batched"},"Batched"),(0,r.mdx)("p",null,"If your sources support batching, and you batch with ",(0,r.mdx)("a",{parentName:"p",href:"#batching-with-declarative-resolvers"},"declarative")," or ",(0,r.mdx)("a",{parentName:"p",href:"#batching-with-programmatic-resolvers"},"programmatic resolvers"),", multiple queries combine to form a single request."),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"482px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"45.3125%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/5530d/batched.webp 320w","/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/82cab/batched.webp 482w"],sizes:"(max-width: 482px) 100vw, 482px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/dd4a7/batched.png 320w","/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/b58a3/batched.png 482w"],sizes:"(max-width: 482px) 100vw, 482px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/b58a3/batched.png",alt:"batched",title:"batched",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("h2",{id:"the-n1-problem"},"The ",(0,r.mdx)("inlineCode",{parentName:"h2"},"n+1")," problem"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"n+1")," problem occurs when you request multiple pieces of information that cause the system to make multiple (",(0,r.mdx)("inlineCode",{parentName:"p"},"n"),") queries to a source instead of using a single query. Since each query takes approximately the same amount of time, processing many queries can lead to degraded performance. In this example, a Reviews API contains reviews of your products by SKU. Without batching, you would need to query each SKU individually to return the corresponding reviews."),(0,r.mdx)("h2",{id:"example-without-batching"},"Example (without batching)"),(0,r.mdx)("p",null,"Consider a scenario where you are using the following mesh, where the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Reviews")," source is a third-party API that contains reviews for your products by SKU. Each review consists of a ",(0,r.mdx)("inlineCode",{parentName:"p"},"review"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"customer_name"),", and ",(0,r.mdx)("inlineCode",{parentName:"p"},"rating")," field."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "Products",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://venia.magento.com/graphql"\n          }\n        }\n      },\n      {\n        "name": "Reviews",\n        "handler": {\n          "graphql": {\n            "endpoint": "<Reviews_API_URL>",\n            "useGETForQueries": true\n          }\n        }\n      }\n    ],\n    "additionalTypeDefs": "extend type ConfigurableProduct { customer_reviews: [productReviewslist]} ",\n    "additionalResolvers": [\n      {\n        "targetFieldName": "customer_reviews",\n        "targetTypeName": "ConfigurableProduct",\n        "sourceName": "Reviews",\n        "sourceTypeName": "Query",\n        "sourceFieldName": "productsReviews",\n        "requiredSelectionSet": "{ sku }",\n        "sourceArgs": {\n          "sku": "{root.sku}"\n        }\n      }\n    ],\n    "responseConfig": {\n      "includeHTTPDetails": true\n    }\n  }\n}\n')),(0,r.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Use ",(0,r.mdx)("inlineCode",{parentName:"p"},'"includeHTTPDetails": true')," to see response details that indicate how many calls your mesh made to each source."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("a",{parentName:"p",href:"../extend/index.md"},"custom resolver")," extends the type ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfigurableProduct")," with a new ",(0,r.mdx)("inlineCode",{parentName:"p"},"customer_reviews")," field, which allows nesting review fields inside of queries against the Venia source. The resolver is composed of the following components:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The target (",(0,r.mdx)("inlineCode",{parentName:"li"},"targetTypeName"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"targetFieldName"),") - describes the queried field."),(0,r.mdx)("li",{parentName:"ul"},"The source (",(0,r.mdx)("inlineCode",{parentName:"li"},"sourceName"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"sourceTypeName"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"sourceFieldName"),") - describes where the data is resolved for the target field."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"requiredSelectionSet")," fetches the required arguments."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"sourceArgs")," maps the ",(0,r.mdx)("inlineCode",{parentName:"li"},"requiredSelectionSet")," argument to the source.")),(0,r.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Use ",(0,r.mdx)("inlineCode",{parentName:"p"},'"includeHTTPDetails": true')," to see response details that indicate how many calls your mesh made to each source."),(0,r.mdx)("p",null,"The following query causes multiple calls to the Reviews API:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-graphql"},'{\n  products(filter: { sku: { in: ["VD03", "VT12"] } }) {\n    items {\n      ... on ConfigurableProduct {\n        sku\n        name\n        customer_reviews {\n          sku\n          reviews {\n            review\n            customer_name\n            rating\n          }\n        }\n        __typename\n      }\n    }\n  }\n}\n')),(0,r.mdx)("h2",{id:"batching-with-declarative-resolvers"},"Batching with declarative resolvers"),(0,r.mdx)("p",null,"The following example explains how to use batching inside your mesh configuration file by using ",(0,r.mdx)("a",{parentName:"p",href:"./resolvers/index.md"},"declarative resolvers"),"."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"Reviews")," source takes an array of product SKUs and returns an array of reviews for each SKU. To make a single network request to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Reviews")," source for multiple SKUs, add ",(0,r.mdx)("inlineCode",{parentName:"p"},"keysArg")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"keyField")," to your mesh."),(0,r.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Request batching using API Mesh requires a source endpoint capable of processing an array of values."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "Products",\n        "handler": {\n          "graphql": {\n            "endpoint": " https://venia.magento.com/graphql"\n          }\n        }\n      },\n      {\n        "name": "Reviews",\n        "handler": {\n          "graphql": {\n            "endpoint": "<Reviews_API_URL>",\n            "useGETForQueries": true\n          }\n        }\n      }\n    ],\n    "additionalTypeDefs": "extend type ConfigurableProduct { customer_reviews: productReviewslist} ",\n    "additionalResolvers": [\n      {\n        "targetFieldName": "customer_reviews",\n        "targetTypeName": "ConfigurableProduct",\n        "sourceName": "Reviews",\n        "sourceTypeName": "Query",\n        "sourceFieldName": "productsReviews",\n        "keysArg": "sku",\n        "keyField": "sku"\n      }\n    ],\n    "responseConfig": {\n      "includeHTTPDetails": true\n    }\n  }\n}\n')),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"requiredSelectionSet")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"sourceArgs")," are replaced with ",(0,r.mdx)("inlineCode",{parentName:"p"},"keysarg")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"keyField"),":"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"keysArg")," provides the name of the primary key argument. For this example, the ",(0,r.mdx)("inlineCode",{parentName:"li"},"keysArg")," field is the argument name used when sending an array of SKUs to fetch multiple reviews."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"keyField")," provides the key value for each item in the batched query. For this example, the ",(0,r.mdx)("inlineCode",{parentName:"li"},"keyField")," indicates which Product field provides the SKU value to the review service.")),(0,r.mdx)("p",null,"With the updated mesh, using the ",(0,r.mdx)("a",{parentName:"p",href:"#example-without-batching"},"previous query")," returns the same information, but only makes one call to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Reviews")," source for multiple SKUs."),(0,r.mdx)("h2",{id:"batching-with-programmatic-resolvers"},"Batching with programmatic resolvers"),(0,r.mdx)("p",null,"The following example explains how to use batching inside your mesh configuration file by using ",(0,r.mdx)("a",{parentName:"p",href:"./resolvers/programmatic-resolvers.md"},"programmatic resolvers"),"."),(0,r.mdx)("p",null,"In the following example, ",(0,r.mdx)("inlineCode",{parentName:"p"},"args.skus")," creates an array of SKUs to query instead of querying each SKU individually. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"valuesFromResults")," object is optional and allows you to filter, sort, and transform your results."),(0,r.mdx)("p",null,"In the following example, you would create your mesh configuration file (",(0,r.mdx)("inlineCode",{parentName:"p"},"mesh.json"),") and the referenced JavaScript file (",(0,r.mdx)("inlineCode",{parentName:"p"},"resolver.js"),") in the same directory."),(0,r.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"resolvers.js")," file contains similar logic to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"additionalResolvers.js")," file in ",(0,r.mdx)("a",{parentName:"p",href:"./resolvers/programmatic-resolvers.md#additional-resolversjs"},"Programmatic Resolvers"),", but adds batching and logging."),(0,r.mdx)(p,{slots:"heading, code",repeat:"3",languages:"json, javascript, graphql",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"meshjson"},(0,r.mdx)("inlineCode",{parentName:"h4"},"mesh.json")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "AdobeCommerce",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://venia.magento.com/graphql"\n          }\n        }\n      },\n      {\n        "name": "DiscountsAPI",\n        "handler": {\n          "JsonSchema": {\n            "baseUrl": "https://random-discounts-generator.apimesh-adobe-test.workers.dev",\n            "operations": [\n              {\n                "type": "Query",\n                "field": "discounts",\n                "path": "/getDiscounts?skus={args.skus}",\n                "method": "GET",\n                "requestSample": "https://random-discounts-generator.apimesh-adobe-test.workers.dev/getDiscounts?skus=[%27abc%27,%20%27xyz%27]",\n                "responseSample": "https://random-discounts-generator.apimesh-adobe-test.workers.dev/getDiscounts?skus=[%27abc%27,%20%27xyz%27]",\n                "argTypeMap": {\n                  "skus": {\n                    "type": "array"\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    ],\n    "additionalResolvers": ["./resolvers.js"]\n  }\n}\n')),(0,r.mdx)("h4",{id:"resolverjs"},(0,r.mdx)("inlineCode",{parentName:"h4"},"resolver.js")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'module.exports = {\n  resolvers: {\n    ConfigurableProduct: {\n      special_price: {\n        selectionSet:\n          "{ name price_range { maximum_price { final_price { value } } } }",\n        resolve: (root, args, context, info) => {\n          return context.DiscountsAPI.Query.discounts({\n            root,\n            key: root.sku,\n            argsFromKeys: (skus) => ({ skus }),\n            valuesFromResults: (results) =>\n              results.map(({ discount }) => discount),\n            context,\n            info,\n            selectionSet: "{ sku discount }",\n          })\n            .then((discount) => {\n              let max = 0;\n\n              try {\n                max = root.price_range.maximum_price.final_price.value;\n              } catch (e) {\n                max = 0;\n              }\n\n              if (discount) {\n                return max * ((100 - discount) / 100);\n              } else {\n                return max;\n              }\n            })\n            .catch((e) => {\n              context.logger.error(e);\n              return null;\n            });\n        },\n      },\n    },\n  },\n};\n')),(0,r.mdx)("h4",{id:"sample-query"},"Sample query"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-graphql"},'{\n  products(filter: {sku: {in: ["VD03", "VT12"]}}) {\n    items {\n      name\n      sku\n      special_price\n      price_range {\n        maximum_price {\n          final_price {\n            value\n          }\n        }\n      }\n    }\n  }\n}\n')))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-mesh-advanced-extend-batching-md-79caf8c2f509c5275242.js.map