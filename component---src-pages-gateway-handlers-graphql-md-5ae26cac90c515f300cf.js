"use strict";(self.webpackChunkgraphql_mesh_gateway=self.webpackChunkgraphql_mesh_gateway||[]).push([[5479],{13587:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return d},default:function(){return c}});var r=a(87462),o=a(45987),t=(a(35776),a(3905)),i=a(91515);const l=["components"],d={},m=(p="InlineAlert",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.mdx)("div",e)});var p;const s={_frontmatter:d},h=i.Z;function c(e){let{components:n}=e,a=(0,o.Z)(e,l);return(0,t.mdx)(h,(0,r.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)("h1",{id:"graphql-handlers"},(0,t.mdx)("inlineCode",{parentName:"h1"},"graphql")," handlers"),(0,t.mdx)("p",null,"The ",(0,t.mdx)("inlineCode",{parentName:"p"},"graphql")," handler allows you to connect to a GraphQL endpoint."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "PWA",\n        "handler": {\n          "graphql": {\n            "endpoint": "your_Venia_url"\n          }\n        }\n      },\n      {\n        "name": "AEM",\n        "handler": {\n          "graphql": {\n            "endpoint": "<your_AEM_url>"\n          }\n        }\n      }\n    ]\n  },\n}\n')),(0,t.mdx)("p",null,"This handler allows you to load remote GraphQL schemas as part of your mesh. The GraphQL handler uses the following format:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "MyGraphQLApi",\n      "handler": {\n        "graphql": {\n          "endpoint": "https://my-service-url/graphql"\n        }\n      }\n    }\n  ]\n}\n')),(0,t.mdx)("p",null,"GraphQL handlers can also use local sources, see ",(0,t.mdx)("a",{parentName:"p",href:"../../gateway/handlers/index.md#reference-local-files-in-handlers"},"Reference local file handlers")," for more information."),(0,t.mdx)("h2",{id:"headers-from-context"},"Headers from context"),(0,t.mdx)("p",null,"The following example shows how to pass authorization headers to a GraphQL endpoint."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "MyGraphQLApi",\n      "handler": {\n        "graphql": {\n          "endpoint": "https://your-service/graphql",\n          "operationHeaders": {\n            "Authorization": "Bearer {context.headers[\'x-my-api-token\']}"\n          // Do not use capital letters in header names.\n          }\n        }\n      }\n    }\n  ]\n}\n')),(0,t.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,t.mdx)("p",null,"Header names are automatically converted to lowercase."),(0,t.mdx)("h2",{id:"fetching-sdl-or-introspection-from-cdn"},"Fetching SDL or introspection from CDN"),(0,t.mdx)("p",null,"Consider a scenario where introspection is disabled in the production environment of your GraphQL source, and you want to provide your SDL or introspection separately:"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "MyGraphQLApi",\n            "handler": {\n                "graphql": {\n                    "endpoint": "https://your-service/graphql",\n                    "operationHeaders": {\n                        "Authorization": "Bearer {context.headers[\'GITHUB_TOKEN\']}"\n                    }\n                }\n            }\n        }\n    ]\n}\n')),(0,t.mdx)("p",null,"In this case, CLI's ",(0,t.mdx)("inlineCode",{parentName:"p"},"build")," command won't save the introspection in the artifacts, so your Mesh won't start if the ",(0,t.mdx)("inlineCode",{parentName:"p"},"source")," URL is down."),(0,t.mdx)("h2",{id:"local-schemas"},"Local Schemas"),(0,t.mdx)("p",null,"We recommend providing a local schema by using the ",(0,t.mdx)("a",{parentName:"p",href:"../../gateway/extending-unified-schema.md"},(0,t.mdx)("inlineCode",{parentName:"a"},"additionalTypeDefs"))," and ",(0,t.mdx)("a",{parentName:"p",href:"../multiple-apis.md#extending-graphql-schema-with-additionaltypedefs"},(0,t.mdx)("inlineCode",{parentName:"a"},"additionalResolvers"))," configuration options."),(0,t.mdx)("h2",{id:"config-api-reference"},"Config API reference"),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("inlineCode",{parentName:"li"},"endpoint")," (type: ",(0,t.mdx)("inlineCode",{parentName:"li"},"String"),", required) - URL or file path for your remote GraphQL endpoint",(0,t.mdx)("ul",{parentName:"li"},(0,t.mdx)("li",{parentName:"ul"},"Local file types must be ",(0,t.mdx)("inlineCode",{parentName:"li"},".js")," or ",(0,t.mdx)("inlineCode",{parentName:"li"},".ts"),"."))),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("inlineCode",{parentName:"li"},"schemaHeaders")," (type: ",(0,t.mdx)("inlineCode",{parentName:"li"},"Any"),") - JSON object for adding headers to API calls for runtime schema introspection"),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("inlineCode",{parentName:"li"},"operationHeaders")," (type: ",(0,t.mdx)("inlineCode",{parentName:"li"},"JSON"),") - JSON object for adding headers to API calls for runtime operation execution"),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("inlineCode",{parentName:"li"},"useGETForQueries")," (type: ",(0,t.mdx)("inlineCode",{parentName:"li"},"Boolean"),") - An HTTP GET method for query operations"),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("inlineCode",{parentName:"li"},"method")," (type: ",(0,t.mdx)("inlineCode",{parentName:"li"},"String (GET | POST)"),") - An HTTP method for GraphQL operations")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-gateway-handlers-graphql-md-5ae26cac90c515f300cf.js.map