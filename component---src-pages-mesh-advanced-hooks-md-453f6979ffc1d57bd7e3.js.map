{"version":3,"file":"component---src-pages-mesh-advanced-hooks-md-453f6979ffc1d57bd7e3.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/advanced/hooks.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"hooks\"\n    }}>{`Hooks`}</h1>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The hooks feature is currently in development and will be expanded in future releases. Only `}<inlineCode parentName=\"p\">{`beforeAll`}</inlineCode>{` hooks are currently available.`}</p>\n    <p>{`Hooks allow you to invoke a composable `}<a parentName=\"p\" {...{\n        \"href\": \"#local-vs-remote-functions\"\n      }}>{`local or remote`}</a>{` function on a targeted node.`}</p>\n    <p>{`Some use cases for the `}<inlineCode parentName=\"p\">{`Hooks`}</inlineCode>{` include:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Authenticating a user before all operations`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Checking for an authorization token before making a request`}</p>\n      </li>\n    </ul>\n    {\n      /*\n      -  Publishing events once all operations are executed\n      -  Creating a cart in a 3rd-party store when calling the `Create Cart` mutation (Adobe Commerce)\n      */\n    }\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You cannot use hooks to modify the request or the response. If you want to manipulate data, we recommend that you use `}<a parentName=\"p\" {...{\n        \"href\": \"./extending-unified-schema.md\"\n      }}>{`custom resolvers`}</a>{`.`}</p>\n    <p>{`Hooks increase processing time. Use them sparingly if processing time is important. Hooks are executed in the order you provide them. However, any `}<inlineCode parentName=\"p\">{`blocking`}</inlineCode>{` hooks execute before non-blocking hooks.`}</p>\n    <h2 {...{\n      \"id\": \"hook-arguments\"\n    }}>{`Hook arguments`}</h2>\n    <p>{`Hooks are plugins that accept the following arguments:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"hooks\": {\n    \"beforeAll\": {\n        \"composer\": \"<Local or Remote file>\",\n        \"blocking\": true|false\n    }\n}\n`}</code></pre>\n    {\n      /* \n      `target` (string) - The target GraphQL node.\n          For example, `Query.availableStores` targets [`availableStores`](https://developer.adobe.com/commerce/webapi/graphql/schema/store/queries/available-stores/), which means that if the query calls `availableStores`, then the `composer` will execute.\n      */\n    }\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`composer`}</inlineCode>{` (string) - The local or remote file location of the function you want to execute.`}</p>\n        <p parentName=\"li\">{`  You must add any local scripts to the mesh's `}<a parentName=\"p\" {...{\n            \"href\": \"../basic/handlers/index.md#reference-local-files-in-handlers\"\n          }}><inlineCode parentName=\"a\">{`files`}</inlineCode>{` array`}</a>{`. `}<a parentName=\"p\" {...{\n            \"href\": \"#local-vs-remote-functions\"\n          }}>{`Local vs remote functions`}</a>{` describes when to use a local or remote function.`}</p>\n        <p parentName=\"li\">{`  `}<strong parentName=\"p\">{`NOTE`}</strong>{`: Local composer functions are limited to 30 seconds. If `}<inlineCode parentName=\"p\">{`blocking`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` and the function takes longer than 30 seconds, you will receive a `}<inlineCode parentName=\"p\">{`Timeout Error`}</inlineCode>{`. If you repeatedly encounter this error, consider using a `}<a parentName=\"p\" {...{\n            \"href\": \"#local-vs-remote-functions\"\n          }}>{`remote composer`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`blocking`}</inlineCode>{` (boolean) - (`}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` by default) Determines if the query waits for a successful return message before continuing the query.`}</p>\n        <p parentName=\"li\">{`  The `}<inlineCode parentName=\"p\">{`blocking`}</inlineCode>{` argument allows you to stop running hooks for a query that does not receive a successful response.`}</p>\n        <p parentName=\"li\">{`  If blocking is `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` and the composer returns an error, all future hook executions are canceled.`}</p>\n        <p parentName=\"li\">{`  If blocking is `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` and the composer returns an error, the composer will still be invoked.`}</p>\n      </li>\n    </ul>\n    {\n      /*\n         Blocking hooks are executed before non-blocking hooks. and the node's `target` will not be invoked. If multiple objects use the same `target`, an unsuccessful response means that the `target` is not called for the remainder of the operation.\n      */\n    }\n    <h2 {...{\n      \"id\": \"types-of-hooks\"\n    }}>{`Types of hooks`}</h2>\n    {\n      /* The following sections describe how to invoke hooks at different points during the query. */\n    }\n    <h3 {...{\n      \"id\": \"beforeall\"\n    }}><inlineCode parentName=\"h3\">{`beforeAll`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`beforeAll`}</inlineCode>{` hook allows you to insert a function before the query takes place. This is a good place to add an authentication layer or anything else you want to run before your query.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`beforeAll`}</inlineCode>{` hook is a singular hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"plugins\": [\n    {\n        \"hooks\": {\n            \"beforeAll\": {\n                \"composer\": \"./hooks.js#checkAuthHeader\",\n                \"blocking\": true\n            }\n        }\n    }\n],\n`}</code></pre>\n    {\n      /* \n      ### `before`\n      The `before` hook allows you to insert an object or array before calling the [target](#hook-arguments) resolver. If `blocking` is set to `true` and a blocking response occurs, other queries will resolve as normal.\n      ```ts\n      interface BeforeHooksTransformObject {\n       target: string;\n       composer: string;\n       blocking: boolean;\n      }\n      ```\n      ### `after`\n      The `after` hook allows you to insert an object or array after the specified [target](#hook-arguments) has resolved.\n      <InlineAlert variant=\"info\" slots=\"text\"/>\n      `after` hooks cannot be blocked because they occur after the data resolves.\n      ```ts\n      interface AfterHooksTransformObject {\n       target: string;\n       composer: string;\n      }\n      ```\n      ### `afterAll`\n      The `afterAll` hook allows you to insert a function after the entire operation resolves, but before the response is returned.\n      <InlineAlert variant=\"info\" slots=\"text\"/>\n      `afterAll` hooks cannot be blocked because the data has already resolved.\n      ```ts\n      interface AfterAllTransformObject {\n       composer: string;\n      }\n      ``` */\n    }\n    <h2 {...{\n      \"id\": \"local-vs-remote-functions\"\n    }}>{`Local vs remote functions`}</h2>\n    <p><inlineCode parentName=\"p\">{`local`}</inlineCode>{` composers are defined within your `}<inlineCode parentName=\"p\">{`mesh.json`}</inlineCode>{` file, whereas `}<inlineCode parentName=\"p\">{`remote`}</inlineCode>{` composers are only referenced within your mesh file. Local and remote composers have different advantages and limitations.`}</p>\n    <h3 {...{\n      \"id\": \"local-composers\"\n    }}><inlineCode parentName=\"h3\">{`local`}</inlineCode>{` composers`}</h3>\n    <p>{`Use local composers if:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The entire operation will take less than 30 seconds.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The composer logic is simple and only requires access to the headers, body, and other context objects.`}</p>\n      </li>\n    </ul>\n    <p>{`Avoid using local composers if:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The entire operation will take more than 30 seconds.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The composer needs to make network calls.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The composer has complex or nested loops.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The composer uses restricted constructs, such as `}<inlineCode parentName=\"p\">{`setTimeout`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`setInterval`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`for`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`while`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`console`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`process`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`global`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`throw`}</inlineCode>{`.`}</p>\n      </li>\n    </ul>\n    <p>{`Local composers require adding any local scripts to the mesh's `}<a parentName=\"p\" {...{\n        \"href\": \"../basic/handlers/index.md#reference-local-files-in-handlers\"\n      }}><inlineCode parentName=\"a\">{`files`}</inlineCode>{` array`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"MagentoMonolithApi\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      }\n    ],\n    \"plugins\": [\n      {\n        \"hooks\": {\n          \"beforeAll\": {\n            \"composer\": \"./hooks.js#checkAuthHeader\",\n            \"blocking\": true\n          }\n        }\n      }\n    ],\n    \"files\": [\n      {\n        \"path\": \"./hooks.js\",\n        \"content\": <FILE CONTENT>\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"remote-composers\"\n    }}><inlineCode parentName=\"h3\">{`remote`}</inlineCode>{` composers`}</h3>\n    <p>{`If a local composer does not work or causes timeout errors, consider using a remote composer.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`When using `}<inlineCode parentName=\"p\">{`remote`}</inlineCode>{` composers, you could see decreased performance, because `}<inlineCode parentName=\"p\">{`remote`}</inlineCode>{` composers add a network hop.`}</p>\n    <p><inlineCode parentName=\"p\">{`remote`}</inlineCode>{` composers can use the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`context`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`document`}</inlineCode>{` arguments over the network. However, the serialization and deserialization of JSON data means that any complex fields or references will be lost. If the composer depends on complex fields or references, consider using a `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{` composer instead.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"MagentoMonolithApi\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      }\n    ],\n    \"plugins\": [\n      {\n        \"hooks\": {\n          \"beforeAll\": {\n            \"composer\": \"<Remote Composer URL>\",\n            \"blocking\": true\n          }\n        }\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-composers\"\n    }}>{`Creating `}<inlineCode parentName=\"h2\">{`composers`}</inlineCode></h2>\n    <p>{`A composer can be a local function or a remote serverless function. Composer signatures differ depending on the hook used and the location of the function.`}</p>\n    <h3 {...{\n      \"id\": \"beforeall-hooks\"\n    }}><inlineCode parentName=\"h3\">{`beforeAll`}</inlineCode>{` hooks`}</h3>\n    <p><inlineCode parentName=\"p\">{`beforeAll`}</inlineCode>{` hooks can receive the following fields as objects during runtime:`}</p>\n    {\n      /*\n      `root` - The resolver's return value for this field's root or parent\n      `params` - An object that contains all GraphQL arguments provided for this field\n      For example, when executing `query{ user(id: \"4\") }`, the `params` object passed to the resolver is `{ \"id\": \"4\" }`\n      */\n    }\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`context`}</inlineCode>{` - An object containing information about the request.`}</p>\n        <p parentName=\"li\">{`  For example, `}<inlineCode parentName=\"p\">{`context`}</inlineCode>{` can contain `}<inlineCode parentName=\"p\">{`headers`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` of the request, and the request `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`document`}</inlineCode>{` - A GraphQL representation of the query.`}</p>\n      </li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Since the `}<inlineCode parentName=\"p\">{`beforeAll`}</inlineCode>{` hook runs at the root level, the `}<inlineCode parentName=\"p\">{`document`}</inlineCode>{` object is empty (`}<inlineCode parentName=\"p\">{`{}`}</inlineCode>{`) by default.`}</p>\n    <p>{`If the `}<inlineCode parentName=\"p\">{`composer`}</inlineCode>{` is a remote function, all the arguments are sent in the `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` body when calling the function.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Due to the limitations of `}<inlineCode parentName=\"p\">{`JSON`}</inlineCode>{` serialization and de-serialization, some complex `}<inlineCode parentName=\"p\">{`JSON`}</inlineCode>{` fields inside a remote function's arguments might not function correctly over the `}<inlineCode parentName=\"p\">{`HTTPS`}</inlineCode>{` call.`}</p>\n    <h4 {...{\n      \"id\": \"local-composer-example\"\n    }}>{`Local composer example`}</h4>\n    <p>{`This simple composer checks for an authorization header before processing the query.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = {\n  isAuth: ({context}) => {\n    if (!context.headers.authorization) {\n      return {\n        status: \"ERROR\",\n        message: \"Unauthorized\",\n      };\n    }\n    return {\n      status: \"SUCCESS\",\n      message: \"Authorized\",\n    };\n  },\n};\n`}</code></pre>\n    <p>{`This remote composer fetches your authorization token and inserts it into the `}<inlineCode parentName=\"p\">{`x-auth-token`}</inlineCode>{` header.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function getToken({ authorization = \"\", body = \"\", url = \"\" }) {\n  return \\`\\${authorization} - \\${body} - \\${url}\\`;\n}\n\nmodule.exports = {\n  insertToken: ({ context }) => {\n    const { headers, request, body } = context;\n    const { authorization } = headers;\n    const { url } = request;\n\n    const authToken = getToken({ authorization, url, body });\n\n    return {\n      status: \"SUCCESS\",\n      message: \"Authorized\",\n      data: {\n        headers: {\n          \"x-auth-token\": authToken,\n        },\n      },\n    };\n  },\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"remote-composer-example\"\n    }}>{`Remote composer example`}</h4>\n    <p>{`The following example remote composer checks for an `}<inlineCode parentName=\"p\">{`authorization`}</inlineCode>{` header.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`While this example uses Fastly Edge computing, you can use any serverless function with remote hooks.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`addEventListener(\"fetch\", (event) => event.respondWith(handleRequest(event)));\n\nasync function handleRequest(event) {\n    try {\n        const body = await event.request.json();\n        if (!body.context.headers[\"authorization\"]) {\n            return new Response({\n                status: \"SUCCESS\",\n                message: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        return new Response({\n            status: \"SUCCESS\",\n            message: \"Authorized\"\n        }, {\n            status: 200\n        });\n    } catch (err) {\n        return new Response(err, {\n            status: 500\n        });\n    }\n}\n`}</code></pre>\n    {\n      /* \n      ### `after` and `afterAll` hook composer\n      `after` and `afterAll` hook composers accept the following arguments:\n      -  `key` - The name of the field\n          In `afterAll` hooks, the `key` argument defaults to `ROOT`.\n      -  `data` - The resolved value of the field\n      `after` and `afterAll` hook composers can be local or remote.\n      <InlineAlert variant=\"info\" slots=\"text\"/>\n      Due to the limitations of `JSON` serialization and de-serialization, some complex `JSON` fields inside a remote function's arguments might not function correctly over the `HTTPS` call.\n      ### Examples\n      <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"js, js\" />\n      #### Local composer example\n      ```js\n      module.exports = {\n       publishEvent: (key, data) => {\n         publisher.send(\"Resolved %s to %o\", key, data);\n         // It is unnecessary to return anything from here, because after hooks are non blocking.\n       },\n      };\n      ```\n      #### Remote composer example\n      ```js\n      addEventListener(\"fetch\", (event) => event.respondWith(handleRequest(event)));\n      async function publishEvent(event) {\n       try {\n         const { key, data } = await event.request.json();\n         fetch(EVENT_BUS_URL, {\n           method: \"POST\",\n           body: {\n             key,\n             data,\n           },\n         });\n         return new Response(\n           { status: \"SUCCESS\", message: \"Published Event\" },\n           { status: 200 }\n         );\n       } catch (err) {\n         return new Response(\n           { status: \"ERROR\", message: err.message },\n           { status: 500 }\n         );\n       }\n      }\n      ``` */\n    }\n    <h3 {...{\n      \"id\": \"return-signatures\"\n    }}>{`Return signatures`}</h3>\n    <p>{`The return signature of a composer is the same for local and remote functions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`{\n  status: \"ERROR\" | \"SUCCESS\",\n  message: string,\n  data?: {\n    headers?: {\n        [headerName: string]: string\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","isMDXComponent"],"sourceRoot":""}