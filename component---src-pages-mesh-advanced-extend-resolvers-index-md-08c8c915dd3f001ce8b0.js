"use strict";(self.webpackChunkgraphql_mesh_gateway=self.webpackChunkgraphql_mesh_gateway||[]).push([[167],{73745:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return l},default:function(){return u}});var t=a(58168),i=a(80045),r=(a(88763),a(15680)),o=a(83407);const s=["components"],l={},d={_frontmatter:l},m=o.A;function u(e){let{components:n}=e,a=(0,i.A)(e,s);return(0,r.mdx)(m,(0,t.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"declarative-resolvers"},"Declarative resolvers"),(0,r.mdx)("p",null,"Declarative resolvers use changes to the mesh configuration to customize resolved values. To make these changes programmatically using JavaScript, see ",(0,r.mdx)("a",{parentName:"p",href:"./programmatic-resolvers.md"},"Programmatic resolvers"),"."),(0,r.mdx)("p",null,"You can also use custom resolvers to batch repeated queries and get better response times. For more information, see ",(0,r.mdx)("a",{parentName:"p",href:"../batching.md"},"Batching"),"."),(0,r.mdx)("h2",{id:"declare-a-resolver-to-the-new-additionaltypedefs-by-using-additionalresolvers"},"Declare a resolver to the new ",(0,r.mdx)("inlineCode",{parentName:"h2"},"additionalTypeDefs")," by using ",(0,r.mdx)("inlineCode",{parentName:"h2"},"additionalResolvers")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"additionalResolvers")," field will make our new field executable in the unified schema:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "StackExchange",\n      "handler": {\n        "openapi": {\n          "source": "https://raw.githubusercontent.com/grokify/api-specs/master/stackexchange/stackexchange-api-v2.2_openapi-v3.0.yaml"\n        }\n      }\n    }\n  ],\n  "additionalTypeDefs": "extend type Query {\\n  listQuestionsFromStackOverflow(first: Int!): [Question]\\n}\\n",\n  "additionalResolvers": [\n    {\n      "targetTypeName": "Query",\n      "targetFieldName": "listQuestionsFromStackOverflow",\n      "sourceName": "StackExchange",\n      "sourceTypeName": "Query",\n      "sourceFieldName": "listQuestions",\n      "sourceArgs": {\n        "pagesize": "{args.first}"\n      },\n      "result": "items"\n    }\n  ]\n}\n')),(0,r.mdx)("h3",{id:"configuration-options"},"Configuration options"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The target (",(0,r.mdx)("inlineCode",{parentName:"li"},"targetTypeName"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"targetFieldName"),") - describes the queried field."),(0,r.mdx)("li",{parentName:"ul"},"The source (",(0,r.mdx)("inlineCode",{parentName:"li"},"sourceName"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"sourceTypeName"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"sourceFieldName"),") - describes where the data is resolved for the target field."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"requiredSelectionSet")," fetches the required arguments."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"sourceArgs")," maps the ",(0,r.mdx)("inlineCode",{parentName:"li"},"requiredSelectionSet")," argument to the source."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"keysArg")," provides the name of the primary key argument. For this example, the ",(0,r.mdx)("inlineCode",{parentName:"li"},"keysArg")," field is the argument name used when sending an array of SKUs to fetch multiple reviews."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"keyField")," provides the key-value for each item in the batched query. For this example, the ",(0,r.mdx)("inlineCode",{parentName:"li"},"keyField")," indicates which Product field provides the SKU value to the review service.")),(0,r.mdx)("h2",{id:"combining-schemas-using-declarative-api"},"Combining schemas using declarative API"),(0,r.mdx)("p",null,"We learned that we can combine multiple APIs in a mesh using ",(0,r.mdx)("inlineCode",{parentName:"p"},"additionalTypeDefs")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"additionalResolvers"),"."),(0,r.mdx)("p",null,"The following example has two different OpenAPI sources. We will add two new fields to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Cities")," type, and those fields have return types from the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Weather")," API."),(0,r.mdx)("p",null,"To achieve this, we will use ",(0,r.mdx)("inlineCode",{parentName:"p"},"additionalResolvers")," inside the mesh configuration file."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "Cities",\n      "handler": {\n        "openapi": {\n          "source": "https://api.apis.guru/v2/specs/mashape.com/geodb/1.0.0/swagger.json",\n          "operationHeaders": {\n            "X-RapidAPI-Key": "a12b3c456defg78hij9kl0123m4no5pqr6stuv789wxyz01a23"\n          }\n        }\n      }\n    },\n    {\n      "name": "Weather",\n      "handler": {\n        "openapi": {\n          "source": "https://api.apis.guru/v2/specs/weatherbit.io/2.0.0/swagger.json"\n        }\n      }\n    }\n  ],\n  "additionalTypeDefs": "extend type PopulatedPlaceSummary {\\n  dailyForecast: [Forecast]\\n  todayForecast: Forecast\\n}\\n",\n  "additionalResolvers": [\n    {\n      "targetTypeName": "PopulatedPlaceSummary",\n      "targetFieldName": "dailyForecast",\n      "requiredSelectionSet": "{\\n  latitude\\n  longitude\\n}\\n",\n      "sourceName": "Weather",\n      "sourceTypeName": "Query",\n      "sourceFieldName": "getForecastDailyLatLatLonLon",\n      "sourceArgs": {\n        "lat": "{root.latitude}",\n        "lon": "{root.longitude}",\n        "key": "{context.headers[\'x-weather-api-key\']}"\n      },\n      "result": "data"\n    },\n    {\n      "type": "PopulatedPlaceSummary",\n      "field": "todayForecast",\n      "requiredSelectionSet": "{\\n  latitude\\n  longitude\\n}\\n",\n      "sourceName": "Weather",\n      "sourceTypeName": "Query",\n      "sourceFieldName": "getForecastDailyLatLatLonLon",\n      "sourceArgs": {\n        "lat": "{root.latitude}",\n        "lon": "{root.longitude}",\n        "key": "{context.headers[\'x-weather-api-key\']}"\n      },\n      "result": "data[0]"\n    }\n  ]\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-mesh-advanced-extend-resolvers-index-md-08c8c915dd3f001ce8b0.js.map