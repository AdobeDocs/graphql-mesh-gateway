{"version":3,"file":"component---src-pages-mesh-advanced-headers-md-40e3c05317189920e914.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/advanced/headers.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"request-and-response-headers\"\n    }}>{`Request and response headers`}</h1>\n    <p>{`To specify headers for your mesh, you can add them inside the `}<inlineCode parentName=\"p\">{`JSON`}</inlineCode>{` file that describes your mesh, or you can add them when querying. Currently, you can add `}<a parentName=\"p\" {...{\n        \"href\": \"#request-headers\"\n      }}>{`request headers`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#response-headers\"\n      }}>{`response headers`}</a>{`, which both can contain `}<a parentName=\"p\" {...{\n        \"href\": \"./caching/\"\n      }}>{`cache-control headers`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"request-headers\"\n    }}>{`Request headers`}</h2>\n    <p>{`Request headers provide more information about the request context. You can add request headers to your `}<a parentName=\"p\" {...{\n        \"href\": \"#add-request-headers-in-your-mesh-file\"\n      }}>{`mesh config`}</a>{`.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`API Mesh limits request headers to a maximum of 500.`}</p>\n    <h3 {...{\n      \"id\": \"add-request-headers-in-your-mesh-file\"\n    }}>{`Add request headers in your mesh file`}</h3>\n    <p>{`To add headers directly to a source handler in your mesh JSON file, add the `}<inlineCode parentName=\"p\">{`operationHeaders`}</inlineCode>{` object with key-value pairs for your headers. The following example defines the `}<inlineCode parentName=\"p\">{`Store`}</inlineCode>{` header for the Commerce source and multiple headers for the LiveSearch source.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Commerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://<host>/graphql\",\n            \"operationHeaders\": {\n              \"Store\": \"default\"\n            }\n          }\n        }\n      },\n      {\n        \"name\": \"LiveSearch\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://<host>/search/graphql\",\n            \"operationHeaders\": {\n              \"Magento-Environment-Id\": \"<environment_id>\",\n              \"Magento-Website-Code\": \"base\",\n              \"Magento-Store-Code\": \"main_website_store\",\n              \"Magento-Store-View-Code\": \"default\",\n              \"X-Api-Key\": \"search_gql\"\n            }\n          }\n        }\n      }\n    ]\n  },\n}\n`}</code></pre>\n    <p>{`You can also inject dynamic values from the context into your headers. For examples of dynamic header values, select a handler:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../basic/handlers/openapi.md#headers-from-context\"\n        }}>{`OpenAPI handlers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../basic/handlers/graphql.md#headers-from-context\"\n        }}>{`GraphQL handlers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../basic/handlers/json-schema.md#headers-from-context\"\n        }}>{`JSON Schema handlers`}</a></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"request-id-header\"\n    }}>{`Request ID header`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`x-request-id`}</inlineCode>{` header allows you to track and debug requests by assigning a user-specified ID number. If you provide this ID in the request header, then the response includes the header.`}</p>\n    <p><inlineCode parentName=\"p\">{`x-request-id: ABC123`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"media-types\"\n    }}>{`Media types`}</h4>\n    <p>{`Depending on the type of information you are passing in a header, your source might require that you specify a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.iana.org/assignments/media-types/media-types.xhtml\"\n      }}>{`media type`}</a>{`, which tells the mesh and your sources how to interpret the data you are passing. Use the `}<inlineCode parentName=\"p\">{`Content-Type`}</inlineCode>{` key-value pair in the `}<inlineCode parentName=\"p\">{`operationHeaders`}</inlineCode>{` object to define your content format.`}</p>\n    <p>{`In the following example, the `}<inlineCode parentName=\"p\">{`\"Content-Type\": \"application/json\"`}</inlineCode>{` key-value pair indicates that the content is in JSON format.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"operationHeaders\": {\n  \"Content-Type\": \"application/json\",\n},\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"response-headers\"\n    }}>{`Response headers`}</h2>\n    <p>{`Response headers provide a detailed context of the response. Currently, you can only add response headers from the mesh config.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`All response header names must be unique. Conflicting header names will result in an error when you try to create or update a mesh.`}</p>\n    <h3 {...{\n      \"id\": \"add-response-headers-in-your-mesh-file\"\n    }}>{`Add response headers in your mesh file`}</h3>\n    <p>{`Mesh owners can use the `}<inlineCode parentName=\"p\">{`responseConfig.headers`}</inlineCode>{` object to add response headers. Define each header as a key-value pair.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`    { \n      \"meshConfig\": { \n        \"sources\": [\n          {\n            \"name\": \"venia\", \n            \"handler\": { \n              \"graphql\": { \n                \"endpoint\": \"https://venia.magento.com/graphql\"\n              } \n            } \n          }\n        ],\n       \"responseConfig\": {\n        \"headers\": {\n            \"Cache-Control\": \"max-age=60480\",\n            \"Vary\": \"Accept\"\n          }\n        }\n      }\n    }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"return-forwarded-headers\"\n    }}>{`Return forwarded headers`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`responseConfig.headers`}</inlineCode>{` object also allows you to return header values from a source. The following example requests the `}<inlineCode parentName=\"p\">{`X-Magento-Cache-Id`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`X-Cache`}</inlineCode>{` headers from the Venia source.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"../basic/handlers/json-schema.md\"\n      }}>{`JSON Schema handlers`}</a>{` do not support `}<inlineCode parentName=\"p\">{`responseConfig`}</inlineCode>{` functionality.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"venia\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        },\n        \"responseConfig\": {\n          \"headers\": [\n            \"X-Magento-Cache-Id\",\n            \"X-Cache\"\n          ]\n        }\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"conflicting-headers\"\n    }}>{`Conflicting headers`}</h4>\n    <p>{`When forwarding headers, an error occurs if two or more sources return a header with the same name. To view all headers, regardless of source, add the `}<inlineCode parentName=\"p\">{`x-include-metadata`}</inlineCode>{` header with a value of `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in your GraphQL client.`}</p>\n    <p>{`Including metadata prefixes the returned response headers with their source name. In the following example, the `}<inlineCode parentName=\"p\">{`cache-control`}</inlineCode>{` header values are returned for the `}<inlineCode parentName=\"p\">{`venia`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`commerce`}</inlineCode>{` sources.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    ...\n    },\n  \"_ggw_metadata__\": {\n        \"responseHeaders\": {\n          \"x-venia-cache-control\": \"max-age=3600\",\n          \"x-commerce-cache-control\": \"max-age=1800\",\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"retrieving-handler-details\"\n    }}>{`Retrieving handler details`}</h2>\n    <p>{`Setting an `}<inlineCode parentName=\"p\">{`httpDetails`}</inlineCode>{` header to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` no longer returns `}<inlineCode parentName=\"p\">{`httpDetails`}</inlineCode>{` when querying. Instead, the setting is now controlled at the mesh level by the `}<a parentName=\"p\" {...{\n        \"href\": \"../basic/work-with-mesh.md#include-httpdetails-in-query-responses\"\n      }}><inlineCode parentName=\"a\">{`includeHTTPDetails`}</inlineCode>{` setting`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"header-troubleshooting\"\n    }}>{`Header troubleshooting`}</h2>\n    <h3 {...{\n      \"id\": \"fastly-prefixing\"\n    }}>{`Fastly Prefixing`}</h3>\n    <p>{`API mesh prefixes any Fastly source headers with their source name. For example, a source named \"commerce\" with an `}<inlineCode parentName=\"p\">{`x-magento-cache-id`}</inlineCode>{` header is converted to `}<inlineCode parentName=\"p\">{`x-commerce-magento-cache-id`}</inlineCode>{`. However, if your endpoint URL contains \"magento\", API Mesh assumes you are connecting to an Adobe Commerce instance and does not prefix your headers with a source name. Using the previous example, your header would remain `}<inlineCode parentName=\"p\">{`x-magento-cache-id`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"401-errors\"\n    }}>{`401 errors`}</h3>\n    <p>{`If you receive a `}<inlineCode parentName=\"p\">{`401`}</inlineCode>{` or similar error when passing headers, add the following content-type specification to your mesh configuration file, as described in `}<a parentName=\"p\" {...{\n        \"href\": \"#media-types\"\n      }}>{`media types`}</a>{`. This issue can occur when you pass your authorization credentials, such as username and password, to an endpoint, but the endpoint does not know how to consume that information. Specifying the `}<inlineCode parentName=\"p\">{`Content-Type`}</inlineCode>{` tells your endpoint how to parse the request body.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"operationHeaders\": {\n  \"Content-Type\": \"application/json\",\n},\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}