{"version":3,"file":"component---src-pages-reference-transforms-replace-field-md-02dbc1bb672436a8cbb7.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/reference/transforms/replace-field.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"replacefield-transform\"\n    }}><inlineCode parentName=\"h1\">{`replaceField`}</inlineCode>{` transform`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`replaceField`}</inlineCode>{` transform allows you to replace the configuration properties of a GraphQL field (source) with the ones of another field (target).`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`replace-field`}</inlineCode>{` transforms allow you to replace the configuration properties of one field with another. This allows you to hoist field values from a subfield to its parent.`}</p>\n    <p>{`Use this transform to clean up redundant queries or replace field types.\nIt can be customized to completely replace and/or compose resolve functions with a great degree of customization.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Currently, this transform supports `}<inlineCode parentName=\"p\">{`bare`}</inlineCode>{` mode only. For information about `}<inlineCode parentName=\"p\">{`bare`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` modes, read the `}<a parentName=\"p\" {...{\n        \"href\": \"index.md#two-different-modes\"\n      }}>{`dedicated section`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The following example hoists the Adobe Commerce `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` field from the `}<inlineCode parentName=\"p\">{`ProductInterface`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` field of `}<inlineCode parentName=\"p\">{`ProductImage`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"AdobeCommerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        },\n        \"transforms\": [\n          {\n            \"replaceField\": {\n              \"replacements\": [\n                {\n                  \"to\": {\n                    \"type\": \"ProductImage\",\n                    \"field\": \"label\"\n                  },\n                  \"from\": {\n                    \"type\": \"ProductInterface\",\n                    \"field\": \"name\"\n                  },\n                  \"scope\": \"hoistValue\"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"how-the-transform-works\"\n    }}>{`How the transform works`}</h2>\n    <p><inlineCode parentName=\"p\">{`from`}</inlineCode>{` defines your source, the field in the schema you want to replace.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`[\n  {\n    \"from\": {\n      \"type\": \"Query\",\n      \"field\": \"books\"\n    }\n  }\n]\n`}</code></pre>\n    <p>{`In this case, we want to replace the field `}<inlineCode parentName=\"p\">{`books`}</inlineCode>{` in the type `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{`, which has the type `}<inlineCode parentName=\"p\">{`BooksApiResponse`}</inlineCode>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`to`}</inlineCode>{` defines the target, and which field should replace your identified source field.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"to\": {\n    \"type\": \"BooksApiResponse\",\n    \"field\": \"books\"\n  }\n}\n`}</code></pre>\n    <p>{`To summarize, with the configuration above, we want the field `}<inlineCode parentName=\"p\">{`books`}</inlineCode>{` in type `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` to be replaced from being of type `}<inlineCode parentName=\"p\">{`BooksApiResponse`}</inlineCode>{` to become type `}<inlineCode parentName=\"p\">{`[Book]`}</inlineCode>{`.`}</p>\n    <p>{`Finally, since we no longer have any reference to `}<inlineCode parentName=\"p\">{`BooksApiResponse`}</inlineCode>{` this becomes a loose type, which means the transform will purge it from the GraphQL schema.`}</p>\n    <h2 {...{\n      \"id\": \"transform-scopes\"\n    }}>{`Transform scopes`}</h2>\n    <p>{`We explored how to use the transform to replace field Types.\nThe transform always replaces the type of source field with the type of the target.`}</p>\n    <p>{`However, the transform also allows you to pass a scope property, which values can be `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`hoistValue`}</inlineCode>{`.`}</p>\n    <p>{`We could say that the scope property could also take a `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` value, but since it's the minimum requirement to replace the Type, this is considered the default scope and so it wouldn't make sense to pass it when you desire just this behavior.`}</p>\n    <h3 {...{\n      \"id\": \"scope-config\"\n    }}><inlineCode parentName=\"h3\">{`scope:`}</inlineCode>{` config`}</h3>\n    <p>{`The transform will replace the full field config when you pass `}<inlineCode parentName=\"p\">{`scope: config{:yaml}`}</inlineCode>{`.`}</p>\n    <p>{`A field config includes properties of the field such as `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`args`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`resolve`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`subscribe`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`deprecationReason`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`extensions`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`astNode`}</inlineCode>{`.`}</p>\n    <p>{`As you can see, this is very comprehensive as it includes things like arguments and the resolve and subscribes functions.`}</p>\n    <p>{`This can be useful when you have custom resolve functions on your target field. So you are happy to replace the source field entirely. However, you should be careful when you fully understand the implications of the behavior for your replaced field.`}</p>\n    <h3 {...{\n      \"id\": \"scope-hoistvalue\"\n    }}><inlineCode parentName=\"h3\">{`scope: hoistValue`}</inlineCode></h3>\n    <p>{`We have seen how `}<inlineCode parentName=\"p\">{`hoistValue`}</inlineCode>{` can be useful in the full example described in the \"How to use?\" paragraph.`}</p>\n    <p>{`Once again, by default, the transform will replace the Type of the field only.`}</p>\n    <p>{`When passing `}<inlineCode parentName=\"p\">{`scope: hoistValue{:yaml}`}</inlineCode>{` in addition to replacing the Type, the transform will wrap the resolve function of the original field (source) with an extra function. This function intercepts the return value of the resolver to ultimately return only the direct child property that has the same name as the target field; hence performing value hoisting.`}</p>\n    <p>{`Taking into account the original schema shared above, originally, `}<inlineCode parentName=\"p\">{`Query.books`}</inlineCode>{` would return a value like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"books\": {\n    \"books\": [\n      { \"title\": \"abc\", \"author\": \"def\" },\n      { \"title\": \"ghi\", \"author\": \"lmn\" }\n    ]\n  }\n}\n`}</code></pre>\n    <p>{`But the wrapping function applied to the original resolver, when passing a `}<inlineCode parentName=\"p\">{`hoistValue`}</inlineCode>{` scope, will change the value above to this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"books\": [\n    { \"title\": \"abc\", \"author\": \"def\" },\n    { \"title\": \"ghi\", \"author\": \"lmn\" }\n  ]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"additional-type-definitions\"\n    }}>{`Additional type definitions`}</h2>\n    <p>{`The examples shared so far are simple because we wanted to replace fields with other available fields in the original schema.`}</p>\n    <p>{`However, sometimes you might want to replace a field Type with something that is not available in the original schema.\nIn this case, the transform allows you to pass additional type definitions that will be injected into your schema to use them as target field Types.`}</p>\n    <p>{`Let's have a look at a Mesh config to be applied to the GraphQL schema shared above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"replaceField\": {\n        \"typeDefs\": \"type NewAuthor {\\\\n  age: String\\\\n}\\\\n\",\n        \"replacements\": [\n          {\n            \"from\": {\n              \"type\": \"Author\",\n              \"field\": \"age\"\n            },\n            \"to\": {\n              \"type\": \"NewAuthor\",\n              \"field\": \"age\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`The config above will change the type `}<inlineCode parentName=\"p\">{`Author`}</inlineCode>{` from this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`type Author {\n  name: String!\n- age: Int!\n+ age: String\n}\n`}</code></pre>\n    <p>{`To this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Author {\n  name: String!\n  age: String\n}\n`}</code></pre>\n    {\n      /* \n      ## Custom composers\n      Performing value hoisting or replacing the entire field config is powerful, but it might not always fully satisfy custom needs.\n      For instance, if you applied transforms to the bare schema (such as field renaming), the built-in value hoisting functionality won't work because you'd need to hoist the child property provided by the original schema, and not the renamed version.\n      The transform allows you to assign composers to replace the rule, which lets you define your custom logic on top of fields' resolve functions.\n      A composer is a function that wraps the resolve function, giving you access to this before it is executed. You can then intercept its output value so that finally you can also define a custom return value.\n      Let's look at an example.\n      Currently, our `Book` type has a `code` field; we want to replace this field and turn it into a boolean. Our logic assumes that if we have a book code, it means this book is available in our store.\n      Eventually, we want to completely replace `code` with `isAvailable`; as you can see, this requires implementing custom logic.\n      ```json\n      {\n       \"transforms\": [\n         {\n           \"replaceField\": {\n             \"typeDefs\": \"type NewBook {\\n  isAvailable: Boolean\\n}\\n\",\n             \"replacements\": [\n               {\n                 \"from\": {\n                   \"type\": \"Book\",\n                   \"field\": \"code\"\n                 },\n                 \"to\": {\n                   \"type\": \"NewBook\",\n                   \"field\": \"isAvailable\"\n                 },\n                 \"composer\": \"./customComposers.ts#isAvailable\"\n               }\n             ]\n           }\n         }\n       ]\n      }\n      ```\n      ```js\n      // customResolvers.js\n      module.exports = {\n       isAvailable: next => async (root, args, context, info) => {\n         // 'next' is the field resolve function\n         const code = await next(root, args, context, info)\n         return Boolean(code)\n       }\n      }\n      ```\n      Now our `code` field will return a Boolean as per custom logic implemented through the javascript function above.\n      ## Renaming fields\n      If we continue to elaborate on what we did above, when attaching composers to field resolvers to implement custom logic; it seems logical that a field that has been changed in Type and so return value, even with the addition of custom logic, has certainly evolved from the original field and so it would probably be best to rename it.\n      replaceField transform allows you to do that directly as part of the replacements rules; you just need to pass the `name` property to define a new name for your target field.\n      Let's wrap this up by adding a finishing touch to our schema:\n      ```json\n      {\n       \"transforms\": [\n         {\n           \"replaceField\": {\n             \"typeDefs\": \"type NewBook {\\n  isAvailable: Boolean\\n}\\n\",\n             \"replacements\": [\n               {\n                 \"from\": {\n                   \"type\": \"Query\",\n                   \"field\": \"books\"\n                 },\n                 \"to\": {\n                   \"type\": \"BooksApiResponse\",\n                   \"field\": \"books\"\n                 },\n                 \"scope\": \"hoistValue\"\n               },\n               {\n                 \"from\": {\n                   \"type\": \"Book\",\n                   \"field\": \"code\"\n                 },\n                 \"to\": {\n                   \"type\": \"NewBook\",\n                   \"field\": \"isAvailable\"\n                 },\n                 \"composer\": \"./customResolvers.js#isAvailable\",\n                 \"name\": \"isAvailable\"\n               }\n             ]\n           }\n         }\n       ]\n      }\n      ```\n      And now we have the following shiny GraphQL schema:\n      ```graphql\n      type Query {\n       books: [Book]\n      }\n      type Book {\n       title: String!\n       author: Author!\n       isAvailable: Boolean\n      }\n      type Author {\n       name: String!\n       age: Int!\n      }\n      ```\n      */\n    }\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`typeDefs`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`) - Additional type definitions, used to replace field types`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`replacements`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required) - Array of rules to replace fields`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`from`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`to`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`scope`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String (config | hoistValue)`}</inlineCode>{`)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`composer`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}