{"version":3,"file":"component---src-pages-mesh-security-md-1398b0eb9de0c329b94f.js","mappings":"mSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,YACH,aACL,kBAAK,uMACL,kBAAK,qJAAmJ,cAAGC,WAAW,IAClK,KAAQ,6BACL,WAAe,MACtB,kBAAK,2EAAyE,cAAGA,WAAW,IACxF,KAAQ,qCACL,oBAAwB,MAC/B,eACE,GAAM,0BACH,2BACL,kBAAK,iPAA+O,cAAGA,WAAW,IAC9P,KAAQ,gCACL,UAAc,cAAY,cAAGA,WAAW,IAC3C,KAAQ,uBACL,gBAAoB,MAC3B,kBAAK,6mBAA2mB,uBAAYA,WAAW,KAAM,8BAA2C,2BACxrB,kBAAK,8BAA4B,uBAAYA,WAAW,KAAM,OAAoB,gGAGrF,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/security.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"security\"\n    }}>{`Security`}</h1>\n    <p>{`The data plane used by API Mesh is public but requires a MeshID and an API Key to access. We recommend storing your API Key in a header, instead of using the API Key appended to your mesh's URL.`}</p>\n    <p>{`Basic authorization is provided by your Mesh ID and API Key. Additionally, API Mesh honors any downstream authorization headers provided by your `}<a parentName=\"p\" {...{\n        \"href\": \"./basic/handlers/index.md\"\n      }}>{`sources`}</a>{`.`}</p>\n    <p>{`If you require additional authentication or authorization, you can use `}<a parentName=\"p\" {...{\n        \"href\": \"./best-practices/multiple-apis.md\"\n      }}>{`custom resolvers`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"ddos-and-rate-limiting\"\n    }}>{`DDoS and rate limiting`}</h2>\n    <p>{`Distributed denial-of-service (DDoS) attack protection, rate limiting, and throttling are provided at a global level by Adobe I/O Runtime. For more individualized protection, we recommend adding a Content Delivery Network (CDN), such as `}<a parentName=\"p\" {...{\n        \"href\": \"./advanced/caching/fastly.md\"\n      }}>{`Fastly`}</a>{`, through `}<a parentName=\"p\" {...{\n        \"href\": \"./advanced/caching/\"\n      }}>{`edge caching`}</a>{`.`}</p>\n    <p>{`Rate limiting mitigates DDoS threats by preventing a traffic source from sending too many requests. API Mesh controls the incoming traffic to our servers by limiting the number of requests that the API can receive within a given period. If the limit is reached before the time expires, the policy rejects all requests, which avoids any additional load on the API Mesh service and the backend source APIs within your mesh configurations. This is a global policy, covering the entire service. Rate-limiting restrictions are based on your individual API key. In the event you are rate limited, your mesh will produce an `}<inlineCode parentName=\"p\">{`HTTP 429 Too Many Requests`}</inlineCode>{` response status code.`}</p>\n    <p>{`If you encounter repeated `}<inlineCode parentName=\"p\">{`429`}</inlineCode>{` response codes, or for any other security issues, contact API Mesh support through Zendesk.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}