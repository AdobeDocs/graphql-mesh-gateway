{"version":3,"file":"component---src-pages-reference-transforms-rename-md-a2b97385ccf24efde7c7.js","mappings":"qNAUsBA,E,mEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,oBADR,qBAGA,0BAAW,uBAAYC,WAAW,KAAvB,UAAX,qCACA,oBACE,eAAIA,WAAW,MAAf,kBACA,eAAIA,WAAW,MAAf,mBACA,eAAIA,WAAW,MAAf,6BAEF,0BAAW,uBAAYA,WAAW,KAAvB,UAAX,wHACA,mBAAG,uBAAYA,WAAW,KAAvB,UAAH,+IAAoM,uBAAYA,WAAW,KAAvB,QAApM,SAA6P,uBAAYA,WAAW,KAAvB,MAA7P,aACA,eACE,GAAM,SADR,UAGA,gFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,y0BA4CL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,0BAAW,uBAAYC,WAAW,KAAvB,QAAX,SAAoE,uBAAYA,WAAW,KAAvB,SAApE,+CAAoK,uBAAYA,WAAW,KAAvB,YAApK,MACA,oLACA,2EAA4D,uBAAYA,WAAW,KAAvB,WAA5D,YAA2H,uBAAYA,WAAW,KAAvB,QAA3H,kFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,yhBAgCL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,4CAA6B,uBAAYC,WAAW,KAAvB,QAA7B,SAAsF,uBAAYA,WAAW,KAAvB,QAAtF,qBAA2J,cAAGA,WAAW,IACrK,KAAQ,2EAD+I,qBAA3J,MAGA,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,MAA0I,uBAAYA,WAAW,MAAvB,QAA1I,OAAkM,uBAAYA,WAAW,MAAvB,QAAlM,0BAA6Q,uBAAYA,WAAW,MAAvB,UAA7Q,8DACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,WAApB,YAAoF,uBAAYA,WAAW,MAAvB,mBAApF,2BAA2K,uBAAYA,WAAW,MAAvB,UAA3K,WACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,gBACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,SAApB,YAAkF,uBAAYA,WAAW,MAAvB,UAAlF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YAApB,YAAqF,uBAAYA,WAAW,MAAvB,UAArF,QAGJ,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,MAApB,YAA+E,uBAAYA,WAAW,MAAvB,UAA/E,gBACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,SAApB,YAAkF,uBAAYA,WAAW,MAAvB,UAAlF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YAApB,YAAqF,uBAAYA,WAAW,MAAvB,UAArF,QAGJ,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,qBAApB,YAA8F,uBAAYA,WAAW,MAAvB,WAA9F,+CACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,sBAApB,YAA+F,uBAAYA,WAAW,MAAvB,WAA/F,gDACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,yBAApB,YAAkG,uBAAYA,WAAW,MAAvB,WAAlG,gDACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,eAApB,YAAwF,uBAAYA,WAAW,MAAvB,UAAxF,iDAMT,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/reference/transforms/rename.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rename-transform\"\n    }}>{`rename transform`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`rename`}</inlineCode>{` transform allows you to rename:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`GraphQL types`}</li>\n      <li parentName=\"ul\">{`GraphQL fields`}</li>\n      <li parentName=\"ul\">{`GraphQL field arguments`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`rename`}</inlineCode>{` transform helps you avoid conflicting names, simplify complicated names and make queries look more like mutations.`}</p>\n    <p><inlineCode parentName=\"p\">{`rename`}</inlineCode>{` elements can contain arrays of individual renaming operations, defined in separate renames objects. Each of these objects must define the `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{` values.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Add the following configuration to your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"rename\": {\n        \"mode\": \"bare | wrap\",\n        \"renames\": [\n          {\n            \"from\": {\n              \"type\": \"ApiUser\"\n            },\n            \"to\": {\n              \"type\": \"User\"\n            }\n          },\n          {\n            \"from\": {\n              \"type\": \"Query\",\n              \"field\": \"apiUser\"\n            },\n            \"to\": {\n              \"type\": \"Query\",\n              \"field\": \"user\"\n            }\n          },\n          {\n            \"from\": {\n              \"type\": \"Query\",\n              \"field\": \"user\",\n              \"argument\": \"user_id\"\n            },\n            \"to\": {\n              \"type\": \"Query\",\n              \"field\": \"user\",\n              \"argument\": \"userId\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`field`}</inlineCode>{` values are required when renaming a field `}<inlineCode parentName=\"p\">{`argument`}</inlineCode>{`.`}</p>\n    <p>{`You can use RegEx flags to enable the use of regular expressions when renaming using this transform. This way you can rename multiple types, fields, or both.`}</p>\n    <p>{`For example, you could use the key-value pair field: `}<inlineCode parentName=\"p\">{`Api(.*)`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{` object to rename any field of the corresponding type that begins with \"api\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`[\n  {\n    \"rename\": {\n      \"mode\": \"bare | wrap\",\n      \"renames\": [\n        {\n          \"from\": {\n            \"type\": \"Api(.*)\"\n          },\n          \"to\": {\n            \"type\": \"$1\"\n          },\n          \"useRegExpForTypes\": true\n        },\n        {\n          \"from\": {\n            \"type\": \"Query\",\n            \"field\": \"api(.*)\"\n          },\n          \"to\": {\n            \"type\": \"Query\",\n            \"field\": \"$1\"\n          },\n          \"useRegExpForFields\": true\n        }\n      ]\n    }\n  }\n]\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about `}<inlineCode parentName=\"p\">{`bare`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` modes, read the `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes\"\n      }}>{`dedicated section`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mode`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`bare`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`wrap`}</inlineCode>{`)) - Specify to apply `}<inlineCode parentName=\"li\">{`rename`}</inlineCode>{` transforms to bare schema or by wrapping original schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`renames`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required) - Array of `}<inlineCode parentName=\"li\">{`rename`}</inlineCode>{` rules:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`from`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`argument`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`to`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`argument`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useRegExpForTypes`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)  - Use Regular Expression for type names`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useRegExpForFields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)  - Use Regular Expression for field names`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useRegExpForArguments`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)  - Use Regular Expression for field names`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`regExpFlags`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - Flags to use in the Regular Expression`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}