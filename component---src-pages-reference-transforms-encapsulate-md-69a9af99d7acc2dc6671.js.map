{"version":3,"file":"component---src-pages-reference-transforms-encapsulate-md-69a9af99d7acc2dc6671.js","mappings":"8RAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,0BACL,uBAAYC,WAAW,MAAvB,eAFH,eAGA,0BAAW,uBAAYA,WAAW,KAAvB,eAAX,2GACA,sFAAuE,uBAAYA,WAAW,KAAvB,YAAvE,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBADZ,yFAUL,0BAAW,uBAAYA,WAAW,KAAvB,eAAX,gDACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBADZ,6MAkBL,oMACA,eACE,GAAM,SADR,UAGA,4FAA6E,uBAAYA,WAAW,KAAvB,iBAA7E,YACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,wfA4BL,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,8DACE,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,4BAAgD,uBAAYA,WAAW,MAAvB,QAAhD,mCAGJ,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,WAApB,YAAoF,uBAAYA,WAAW,MAAvB,UAApF,gCAAuK,uBAAYA,WAAW,MAAvB,eAAvK,gDAA+Q,uBAAYA,WAAW,MAAvB,QAA/Q,KACE,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,SAApB,YAAkF,uBAAYA,WAAW,MAAvB,WAAlF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YAApB,YAAqF,uBAAYA,WAAW,MAAvB,WAArF,MACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,gBAApB,YAAyF,uBAAYA,WAAW,MAAvB,WAAzF,QAMT,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/reference/transforms/encapsulate.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"encapsulate-transform\"\n    }}><inlineCode parentName=\"h1\">{`encapsulate`}</inlineCode>{` transform`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`encapsulate`}</inlineCode>{` transform allows you to easily encapsulate a specific schema into a single field under the root type.`}</p>\n    <p>{`For instance, if your handler created a schema like this, named `}<inlineCode parentName=\"p\">{`mySchema`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  something: String\n}\n\ntype Mutation {\n  doSomething: String\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`encapsulate`}</inlineCode>{` transform will change your schema to this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  mySchema: mySchemaQuery!\n}\n\ntype Mutation {\n  mySchema: mySchemaMutation!\n}\n\ntype mySchemaQuery {\n  something: String\n}\n\ntype mySchemaMutation {\n  doSomething: String\n}\n`}</code></pre>\n    <p>{`This transformer is useful when you have multiple APIs in your Mesh Gateway and you wish to have it wrapped with a name to better understand where each field is coming from.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The following example encapsulates the Adobe Commerce schema into the `}<inlineCode parentName=\"p\">{`AdobeCommerce`}</inlineCode>{` field:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"AdobeCommerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        },\n        \"transforms\": [\n          {\n            \"encapsulate\": {\n              \"applyTo\": {\n                \"query\": true,\n                \"mutation\": false,\n                \"subscription\": false\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - (Optional) The name used for grouping under root types`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If you do not specify a `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{`, the API name will be used.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`applyTo`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`) - The root operations the `}<inlineCode parentName=\"li\">{`encapsulate`}</inlineCode>{` applies to. Unspecified options default to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`query`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mutation`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`subscription`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}