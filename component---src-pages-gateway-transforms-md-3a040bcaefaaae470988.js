"use strict";(self.webpackChunkgraphql_mesh_gateway=self.webpackChunkgraphql_mesh_gateway||[]).push([[6732],{60513:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return s},default:function(){return f}});var r=a(87462),t=a(63366),o=(a(15007),a(64983)),m=a(91515),l=["components"],s={},i=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",n)}},p=i("InlineAlert"),d=i("CodeBlock"),c={_frontmatter:s},h=m.Z;function f(e){var n=e.components,a=(0,t.Z)(e,l);return(0,o.mdx)(h,(0,r.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"transforms"},"Transforms"),(0,o.mdx)("p",null,"While ",(0,o.mdx)("a",{parentName:"p",href:"source-handlers.md"},"handlers")," let you bring outside sources into API Mesh for Adobe Developer App Builder, ",(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/index.md"},"transforms")," allow you to modify the schema to control the contents of your GraphQL requests and responses."),(0,o.mdx)("p",null,"The API Mesh currently supports the following ",(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/index.md"},"transforms"),":"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#rename"},"Rename")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#prefix"},"Prefix")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#filter-schema"},"Filter Schema")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#replace-field"},"Replace Field")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#type-merging"},"Type Merging")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#naming-convention"},"Naming Convention")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"#hooks"},"Hooks"))),(0,o.mdx)("p",null,"Additionally, the following transforms are available but are not fully supported by API Mesh at this time. This means that your mesh will accept the transform, but we have not tested the transform thoroughly and you may encounter errors. Additionally, certain transform options may be disabled due to security concerns."),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/graphql-mesh-gateway/reference/transforms/encapsulate.md"},"Encapsulate")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/graphql-mesh-gateway/reference/transforms/federation.md"},"Federation")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"../reference/transforms/replace-field.md#scope-hoistvalue"},"Hoist field"))),(0,o.mdx)("p",null,"Other transforms are not supported."),(0,o.mdx)("h2",{id:"prefix"},"Prefix"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/prefix.md"},"Prefix")," transform allows you to add prefixes to existing types and root operations. ",(0,o.mdx)("inlineCode",{parentName:"p"},"prefix")," is similar to ",(0,o.mdx)("inlineCode",{parentName:"p"},"rename")," in that it allows you to modify names to avoid conflicts, simplify complicated names, and change the appearance of your query. In contrast with ",(0,o.mdx)("inlineCode",{parentName:"p"},"rename"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"prefix"),' is simpler and only allows you to append a prefix to the existing name. In the example below, we differentiate our sources by adding an "AEM',(0,o.mdx)("em",{parentName:"p"},'" prefix to the ',(0,o.mdx)("a",{parentName:"em",href:"https://experienceleague.adobe.com/docs/experience-manager-cloud-service.html"},"AEM"),' source and a  "Venia'),'" prefix to the ',(0,o.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/pwa-studio/"},"PWA")," source."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "AEM",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://example1.com/graphql"\n          }\n        },\n        "transforms": [\n          {\n            "prefix": {\n              "includeRootOperations": true,\n              "value": "AEM_"\n            }\n          }\n        ]\n      },\n       {\n        "name": "PWA",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://example2.com/graphql"\n          }\n        },\n        "transforms": [\n          {\n            "prefix": {\n              "includeRootOperations": true,\n              "value": "Venia_"\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n')),(0,o.mdx)("h2",{id:"rename"},"Rename"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/rename.md"},"Rename")," transforms allow you to rename a GraphQL field, type, or field argument. Renaming allows you to avoid conflicting names, simplify complicated names, and make queries look more like mutations. In the example below, we rename a long API field name from ",(0,o.mdx)("inlineCode",{parentName:"p"},"integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost")," to the shorter ",(0,o.mdx)("inlineCode",{parentName:"p"},"CreateCustomerToken"),"."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"rename")," elements can contain arrays of individual renaming operations, defined in separate ",(0,o.mdx)("inlineCode",{parentName:"p"},"renames")," objects. Each of these objects must define the ",(0,o.mdx)("inlineCode",{parentName:"p"},"from")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"to")," values."),(0,o.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"You can use ",(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/rename.md#config-api-reference"},"RegEx flags")," to enable the use of regular expressions when renaming using this transform. For example, you could use the key-value pair ",(0,o.mdx)("inlineCode",{parentName:"p"},"field: api(.*)")," in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"from"),' object to rename any field of the corresponding type that begins with "api".'),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "CommerceREST",\n        "handler": {\n          "openapi": {\n            "source": "https://www.example.com/rest/all/schema?services=all"\n          }\n        },\n          "transforms": [\n            {\n              "rename": {\n              "renames": [\n                {\n                  "from": {\n                    "type": "Mutation",\n                    "field": "integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost"\n                  },\n                  "to": {\n                    "type": "Mutation",\n                    "field": "CreateCustomerToken"\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n')),(0,o.mdx)("h2",{id:"filter-schema"},"Filter schema"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/filter-schema.md"},"Filter Schema")," transform allows you to specify which schema elements to include or exclude in your mesh. You can include or exclude entire queries and mutations, or place restrictions on which types can appear in your calls."),(0,o.mdx)("p",null,"For example, you might want to exclude deprecated queries, mutations, and types from your schema so that your integration is not affected when these entities are removed. In the example below, the deprecated Adobe Commerce ",(0,o.mdx)("inlineCode",{parentName:"p"},"category")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"customerOrders")," queries are filtered out of the ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/pwa-studio/"},"PWA")," handler."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "AEM",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://example1.com/graphql"\n          }\n        }\n      },\n      {\n        "name": "PWA",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://example2.com/graphql"\n          }\n        },\n        "transforms": [\n          {\n            "filterSchema": {\n              "filters": [\n                "Query.!category",\n                "Query.!customerOrders"\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n')),(0,o.mdx)("h2",{id:"replace-field"},"Replace Field"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/replace-field.md"},"Replace field")," transforms allow you to replace the configuration properties of one field with another, which allows you to hoist field values from a subfield to its parent. Use this transform to clean up redundant queries or replace field types. In the example below, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"parent")," field is being replaced by the ",(0,o.mdx)("inlineCode",{parentName:"p"},"child")," field."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "PWA",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://example2.com/graphql"\n          }\n        },\n          "transforms": [\n            {\n              "replaceField": {\n              "replacements": [\n                {\n                  "from": {\n                    "type": "Query",\n                    "field": "parent"\n                  },\n                  "to": {\n                    "type": "<your_API_Response>",\n                    "field": "child",\n                  "scope": "hoistvalue"\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n')),(0,o.mdx)("h2",{id:"type-merging"},"Type Merging"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/type-merging.md"},"Type Merging")," allows you to combine multiple sources by merging a type from each source. For example, you could combine responses from two different APIs on a single field, provided you ",(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/rename.md"},"rename")," the fields you want to stitch to the same name. For more information, see this ",(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/multiple-apis.md#merging-types-from-different-sources-using-type-merging"},"example"),"."),(0,o.mdx)("h2",{id:"naming-convention"},"Naming Convention"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"/graphql-mesh-gateway/reference/transforms/naming-convention.md"},"Naming Convention")," transforms allow you to apply casing and other conventions to your response. In the example below, ",(0,o.mdx)("inlineCode",{parentName:"p"},"enumValues")," fields are converted to uppercase, while ",(0,o.mdx)("inlineCode",{parentName:"p"},"fieldNames")," are converted to camel case to enforce consistency."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "PWA",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://example2.com/graphql"\n          }\n        },\n        "transforms": [\n          {\n            "namingConvention": {\n              "enumValues": "upperCase",\n              "fieldNames": "camelCase"\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n')),(0,o.mdx)("h2",{id:"hooks"},"Hooks"),(0,o.mdx)("p",null,"Adobe created the ",(0,o.mdx)("a",{parentName:"p",href:"hooks.md"},"Hooks")," transform to allow you to invoke composable local and remote functions on a targeted node."),(0,o.mdx)(d,{slots:"heading, code",repeat:"4",languages:"ts, ts, ts, ts",mdxType:"CodeBlock"}),(0,o.mdx)("h3",{id:"beforeall"},(0,o.mdx)("inlineCode",{parentName:"h3"},"beforeAll")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"interface BeforeAllTransformObject {\n  composer: string;\n  blocking?: boolean;\n}\n")),(0,o.mdx)("h3",{id:"before"},(0,o.mdx)("inlineCode",{parentName:"h3"},"before")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"interface BeforeHooksTransformObject {\n  target: string;\n  composer: string;\n  blocking?: boolean;\n}\n")),(0,o.mdx)("h3",{id:"after"},(0,o.mdx)("inlineCode",{parentName:"h3"},"after")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"interface AfterHooksTransformObject {\n  target: string;\n  composer: string;\n}\n")),(0,o.mdx)("h3",{id:"afterall"},(0,o.mdx)("inlineCode",{parentName:"h3"},"afterAll")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"interface AfterAllTransformObject {\n  composer: string;\n}\n")))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-gateway-transforms-md-3a040bcaefaaae470988.js.map