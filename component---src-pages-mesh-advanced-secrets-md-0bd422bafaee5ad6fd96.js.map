{"version":3,"file":"component---src-pages-mesh-advanced-secrets-md-0bd422bafaee5ad6fd96.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/advanced/secrets.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"secrets-management\"\n    }}>{`Secrets management`}</h1>\n    <p>{`API Mesh for Adobe Developer App Builder allows you to manage secrets or variables for a mesh. You can use these secrets in your mesh configuration file to securely manage sensitive information. When creating or updating a mesh, you can provide a separate file that defines your secrets. API Mesh encrypts secrets using AES 512-bit encryption.`}</p>\n    <p>{`For security purposes, you cannot receive the secrets once you define them when creating or updating a mesh. For example, running an `}<inlineCode parentName=\"p\">{`aio api-mesh get`}</inlineCode>{` command returns your mesh with the values defined within the mesh configuration file, such as `}<inlineCode parentName=\"p\">{`{context.secrets.SECRET}`}</inlineCode>{` and does not return the actual secret's value.`}</p>\n    <h2 {...{\n      \"id\": \"create-a-secretsyaml-file\"\n    }}>{`Create a `}<inlineCode parentName=\"h2\">{`secrets.yaml`}</inlineCode>{` file`}</h2>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file that contains your secrets. You can modify the file name as necessary. Secrets management only supports the `}<inlineCode parentName=\"p\">{`yaml`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`yml`}</inlineCode>{` file extensions. The file should be in the following format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`secret: \"secret-value\"\n`}</code></pre>\n    <p>{`The following example contains a Bash command as a value for the `}<inlineCode parentName=\"p\">{`HOME`}</inlineCode>{` secret. API Mesh supports Bash commands with or without brackets, such as `}<inlineCode parentName=\"p\">{`$HOME`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`$[HOME]`}</inlineCode>{`.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Bash commands are not supported in Windows environments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AEM: \n  TOKEN: \"my-token\"\n  AEMUSERNAME: \"user-name\"\n  adminname: \"admin-name\"\n\nHOME: '\\\\\\$\\{HOME}'\n`}</code></pre>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You cannot escape the `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` character in secrets files. This means that a secret's value cannot contain `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{`, unless it is part of a Bash command.`}</p>\n    <h2 {...{\n      \"id\": \"add-secrets-to-your-mesh-configuration-file\"\n    }}>{`Add secrets to your mesh configuration file`}</h2>\n    <p>{`Once you have created your `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file, you can reference the secrets in your mesh configuration file using the following format:`}</p>\n    {\n      /* if this example isn't valid, we need to replace it with another very simple example. */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Adobe Commerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"venia.magento.com/graphql\",\n            \"operationHeaders\": {\n              \"secret\": \"{context.<secret_file>.<secret-name>}\"\n            }\n          }\n        }\n      }\n    ],\n  }\n}\n`}</code></pre>\n    <p>{`For more complex use cases, see `}<a parentName=\"p\" {...{\n        \"href\": \"#examples\"\n      }}>{`Examples`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"create-or-update-your-mesh-secrets\"\n    }}>{`Create or update your mesh secrets`}</h2>\n    <p>{`When you create or update a mesh that you want to include secrets in, add the `}<inlineCode parentName=\"p\">{`--secrets`}</inlineCode>{` flag followed by the path to your secrets file. If you do not provide the secrets file when updating a mesh that has secrets, the secrets\\` values are overwritten by their literal references.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"bash, bash\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"create\"\n    }}>{`Create`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`aio api-mesh create mesh.json --secrets secrets.yaml\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"update\"\n    }}>{`Update`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`aio api-mesh update mesh.json --secrets secrets.yaml\n`}</code></pre>\n    <p>{`Your mesh now contains the secrets defined in your `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The following examples demonstrate different use cases in which using secrets management is beneficial.`}</p>\n    <h3 {...{\n      \"id\": \"header-reflection\"\n    }}>{`Header reflection`}</h3>\n    <p>{`The following example mesh configuration uses a header reflection service to demonstrate how you can pass your secrets as headers. This can be useful to test and debug your configuration.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Do not use sensitive data with this example, since it is designed to display your secrets as headers.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"json, yaml\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"meshjson\"\n    }}><inlineCode parentName=\"h4\">{`mesh.json`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"headersData\",\n        \"handler\": {\n          \"JsonSchema\": {\n            \"baseUrl\": \"<header-reflection-service>\",\n            \"operations\": [\n              {\n                \"type\": \"Query\",\n                \"field\": \"data\",\n                \"path\": \"/\",\n                \"method\": \"GET\",\n                \"responseSchema\": \"./getHeadersSchema.json\"\n              }\n            ],\n            \"operationHeaders\": {\n              \"secretHeader\": \"{context.secrets.HOME}\",\n              \"secretAEMHeader\": \"{context.secrets.AEM.TOKEN}\"\n            }\n          }\n        }\n      }\n    ],\n    \"files\": [\n      {\n        \"path\": \"./getHeadersSchema.json\",\n        \"content\": \"{\\\\\"$schema\\\\\":\\\\\"http://json-schema.org/draft-07/schema#\\\\\",\\\\\"type\\\\\":\\\\\"object\\\\\",\\\\\"required\\\\\":[\\\\\"headerKeys\\\\\",\\\\\"headerValues\\\\\",\\\\\"headers\\\\\"],\\\\\"properties\\\\\":{\\\\\"headerKeys\\\\\":{\\\\\"type\\\\\":\\\\\"array\\\\\",\\\\\"items\\\\\":{\\\\\"type\\\\\":\\\\\"string\\\\\"}},\\\\\"headerValues\\\\\":{\\\\\"type\\\\\":\\\\\"array\\\\\",\\\\\"items\\\\\":{\\\\\"type\\\\\":\\\\\"string\\\\\"}},\\\\\"headers\\\\\":{\\\\\"type\\\\\":\\\\\"object\\\\\"}}}\"\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"secretsyaml\"\n    }}><inlineCode parentName=\"h4\">{`secrets.yaml`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AEM: \n  TOKEN: \"my-token\"\n  AEMUSERNAME: \"user-name\"\n  adminname: \"admin-name\"\n\nHOME: '\\\\\\$\\{HOME}'\n`}</code></pre>\n    <p>{`Use the following GraphQL query to retrieve the headers:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"json, json\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"graphql\"\n    }}>{`GraphQL`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  data {\n    headers\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"response\"\n    }}>{`Response`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"data\": {\n      \"headers\": {\n        \"accept-encoding\": \"gzip, br\",\n        \"cf-connecting-ip\": \"0.0.0.0\",\n        \"cf-ipcountry\": \"US\",\n        \"cf-ray\": \"abc123abc123\",\n        \"cf-visitor\": \"{\\\\\"scheme\\\\\":\\\\\"https\\\\\"}\",\n        \"connection\": \"Keep-Alive\",\n        \"host\": \"header-reflection-service\",\n        \"x-forwarded-proto\": \"https\",\n        \"x-real-ip\": \"0.0.0.0\"\n      }\n    }\n  },\n  \"extensions\": {}\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"authorization\"\n    }}>{`Authorization`}</h3>\n    <p>{`The following example provides a simple authorization test. This mesh only returns a valid response, if the `}<inlineCode parentName=\"p\">{`TOKEN`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file is also passed as an authorization header in the request. If the token does not match, the mesh will return an unauthorized error.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"json, yaml\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"meshjson-1\"\n    }}><inlineCode parentName=\"h4\">{`mesh.json`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Commerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      }\n    ],\n    \"plugins\": [\n      {\n        \"hooks\": {\n          \"beforeAll\": {\n            \"composer\": \"./hooks.js#isAuth\",\n            \"blocking\": true\n          }\n        }\n      }\n    ],\n    \"files\": [\n      {\n        \"path\": \"./hooks.js\",\n        \"content\": \"module.exports = {\\\\r\\\\n  isAuth: ({ context }) => {\\\\r\\\\n    const { headers, secrets } = context;\\\\r\\\\n\\\\r\\\\n    if (headers.authorization != secrets.TOKEN) {\\\\r\\\\n      return {\\\\r\\\\n        status: \\\\\"ERROR\\\\\",\\\\r\\\\n        message: \\\\\"Unauthorized\\\\\",\\\\r\\\\n      };\\\\r\\\\n    } else {\\\\r\\\\n      return {\\\\r\\\\n        status: \\\\\"SUCCESS\\\\\",\\\\r\\\\n        message: \\\\\"Authorized\\\\\",\\\\r\\\\n      };\\\\r\\\\n    }\\\\r\\\\n  },\\\\r\\\\n};\\\\r\\\\n\"\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"secretsyaml-1\"\n    }}><inlineCode parentName=\"h4\">{`secrets.yaml`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`TOKEN: \"abcabcdefdefxyzxyz\"\n`}</code></pre>\n    <p>{`After adding the token from the `}<inlineCode parentName=\"p\">{`secrets.yaml`}</inlineCode>{` file to your authorization header, run the following query:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"json, json, json\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"query\"\n    }}>{`Query`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  storeConfig {\n    base_Url\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"authorized-response\"\n    }}>{`Authorized response`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"storeConfig\": {\n      \"base_url\": \"cache_url\"\n    }\n  },\n  \"extensions\": {}\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"unauthorized-response\"\n    }}>{`Unauthorized response`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": null,\n  \"errors\": [\n    \"Unauthorized\"\n  ]\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}