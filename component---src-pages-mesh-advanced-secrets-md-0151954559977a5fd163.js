"use strict";(self.webpackChunkgraphql_mesh_gateway=self.webpackChunkgraphql_mesh_gateway||[]).push([[2745],{36669:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return d},default:function(){return u}});var s=a(58168),t=a(80045),r=(a(88763),a(15680)),o=a(83407);const i=["components"],d={},l=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",n)},m=l("InlineAlert"),p=l("CodeBlock"),h={_frontmatter:d},c=o.A;function u(e){let{components:n}=e,a=(0,t.A)(e,i);return(0,r.mdx)(c,(0,s.A)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"secrets-management"},"Secrets management"),(0,r.mdx)("p",null,"API Mesh for Adobe Developer App Builder allows you to manage secrets for a mesh. You can use these secrets in your mesh configuration file to securely manage sensitive information. When creating or updating a mesh, you can provide a separate file that defines your secrets. API Mesh encrypts secrets using AES-256 encryption."),(0,r.mdx)("p",null,"For security purposes, you cannot receive the secrets once you define them when creating or updating a mesh. For example, running an ",(0,r.mdx)("inlineCode",{parentName:"p"},"aio api-mesh get")," command returns your mesh with the values defined within the mesh configuration file, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"{context.secrets.SECRET}")," and does not return the actual secret's value."),(0,r.mdx)("h2",{id:"create-a-secrets-file"},"Create a secrets file"),(0,r.mdx)("p",null,"Create a YAML file, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml"),", to define your secrets. The file name must end with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"yaml")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"yml")," file extension. Each line in the files defines a different secret."),(0,r.mdx)("p",null,"The following example contains a Bash variable as a value for the ",(0,r.mdx)("inlineCode",{parentName:"p"},"TOKEN")," secret. API Mesh supports strings and numbers with or without single or double quotes and Bash variables with or without brackets, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"$TOKEN")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"$[TOKEN]"),"."),(0,r.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Bash variables are not supported in Windows."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-yaml"},"TOKEN: $TOKEN\nUSERNAME: user-name\nadminname: 'admin-name'\nAEM_USERNAME: \"user-name\"\n\nAPI_KEY: ${COMMERCE_API_KEY}\nAPI_KEY2: $COMMERCE_API_KEY\n")),(0,r.mdx)(m,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"You must escape a literal ",(0,r.mdx)("inlineCode",{parentName:"p"},"$")," character in the secrets file. If the ",(0,r.mdx)("inlineCode",{parentName:"p"},"$")," is not part of a Bash variable, escape it with a backslash (",(0,r.mdx)("inlineCode",{parentName:"p"},"\\"),"): ",(0,r.mdx)("inlineCode",{parentName:"p"},"SECRET: \\$SECRET"),"."),(0,r.mdx)("h2",{id:"add-secrets-to-your-mesh-configuration-file"},"Add secrets to your mesh configuration file"),(0,r.mdx)("p",null,"Once you have created your ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file, you can reference the secrets in your mesh configuration file. You can use secrets in the following locations:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Headers",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Operational headers"))),(0,r.mdx)("li",{parentName:"ul"},"JavaScript files",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Local hooks"),(0,r.mdx)("li",{parentName:"ul"},"Additional resolvers")))),(0,r.mdx)("p",null,"When using secrets with operational headers, use the template literals syntax, for example, ",(0,r.mdx)("inlineCode",{parentName:"p"},"{context.secrets.<SECRET_NAME>}"),"."),(0,r.mdx)("p",null,"When using secrets in JavaScript files using hooks or resolvers, use the secret in context, for example, ",(0,r.mdx)("inlineCode",{parentName:"p"},"const secretValue = context.secrets.<SECRET_NAME>"),"."),(0,r.mdx)("p",null,"The following file provides an example using operational headers:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "Adobe Commerce",\n        "handler": {\n          "graphql": {\n            "endpoint": "venia.magento.com/graphql",\n            "operationHeaders": {\n              "secret": "{context.secrets.<secret-name>}"\n            }\n          }\n        }\n      }\n    ],\n  }\n}\n')),(0,r.mdx)("p",null,"For more complex use cases, see ",(0,r.mdx)("a",{parentName:"p",href:"#examples"},"Examples"),"."),(0,r.mdx)("h2",{id:"create-or-update-your-mesh-secrets"},"Create or update your mesh secrets"),(0,r.mdx)("p",null,"When you create or update a mesh that you want to include secrets in, add the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--secrets")," flag followed by the path to your secrets file. If you do not provide the secrets file when updating a mesh that has secrets, the secrets` values are overwritten by their literal references."),(0,r.mdx)(p,{slots:"heading, code",repeat:"2",languages:"bash, bash",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"create"},"Create"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"aio api-mesh create mesh.json --secrets secrets.yaml\n")),(0,r.mdx)("h4",{id:"update"},"Update"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"aio api-mesh update mesh.json --secrets secrets.yaml\n")),(0,r.mdx)("p",null,"Your mesh now contains the secrets defined in your ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file."),(0,r.mdx)("h2",{id:"examples"},"Examples"),(0,r.mdx)("p",null,"The following examples demonstrate different use cases in which using secrets management is beneficial."),(0,r.mdx)("h3",{id:"header-reflection"},"Header reflection"),(0,r.mdx)("p",null,"The following example mesh configuration uses a header reflection service to demonstrate how you can pass your secrets as headers. This can be useful to test and debug your configuration."),(0,r.mdx)(m,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Do not use sensitive data with this example, since it is designed to display your secrets as headers."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"getHeadersSchema.json")," tab contains the JSON file referenced in the example mesh's ",(0,r.mdx)("inlineCode",{parentName:"p"},"operations")," object. This file provides the required response schema. Copy the file into the same folder as your ",(0,r.mdx)("inlineCode",{parentName:"p"},"mesh.json")," file before creating or updating your mesh."),(0,r.mdx)(p,{slots:"heading, code",repeat:"3",languages:"json, yaml, json",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"meshjson"},(0,r.mdx)("inlineCode",{parentName:"h4"},"mesh.json")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "headersData",\n        "handler": {\n          "JsonSchema": {\n            "baseUrl": "<header-reflection-service>",\n            "operations": [\n              {\n                "type": "Query",\n                "field": "data",\n                "path": "/",\n                "method": "GET",\n                "responseSchema": "./getHeadersSchema.json"\n              }\n            ],\n            "operationHeaders": {\n              "secretHeader": "{context.secrets.API_KEY}",\n              "secretAEMHeader": "{context.secrets.TOKEN}"\n            }\n          }\n        }\n      }\n    ],\n  }\n}\n')),(0,r.mdx)("h4",{id:"secretsyaml"},(0,r.mdx)("inlineCode",{parentName:"h4"},"secrets.yaml")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-yaml"},'TOKEN: "my-token"\nAEMUSERNAME: "user-name"\nadminname: "admin-name"\n\nAPI_KEY: $COMMERCE_API_KEY\n')),(0,r.mdx)("h4",{id:"getheadersschemajson"},(0,r.mdx)("inlineCode",{parentName:"h4"},"getHeadersSchema.json")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "type": "object",\n  "required": [\n    "headerKeys",\n    "headerValues",\n    "headers"\n  ],\n  "properties": {\n    "headerKeys": {\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    },\n    "headerValues": {\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    },\n    "headers": {\n      "type": "object"\n    }\n  }\n}\n')),(0,r.mdx)("p",null,"Use the following GraphQL query to retrieve the headers. This query will vary depending on the header reflection service you are using."),(0,r.mdx)(p,{slots:"heading, code",repeat:"2",languages:"json, json",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"graphql"},"GraphQL"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  data {\n    headers\n  }\n}\n")),(0,r.mdx)("h4",{id:"response"},"Response"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "data": {\n      "headers": {\n        "accept-encoding": "gzip, br",\n        "cf-connecting-ip": "0.0.0.0",\n        "cf-ipcountry": "US",\n        "cf-ray": "abc123abc123",\n        "cf-visitor": "{\\"scheme\\":\\"https\\"}",\n        "connection": "keep-alive",\n        "host": "header-reflection-service",\n        "secretaemeader": "abcabcdefdefxyzxyz",\n        "secretheader": "\\\\/root",\n        "x-forwarded-proto": "https",\n        "x-real-ip": "0.0.0.0"\n      }\n    }\n  },\n  "extensions": {}\n}\n')),(0,r.mdx)("h3",{id:"authorization"},"Authorization"),(0,r.mdx)("p",null,"The following example provides a simple authorization test. This mesh only returns a valid response, if the ",(0,r.mdx)("inlineCode",{parentName:"p"},"TOKEN")," in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file is also passed as an authorization header in the request. If the token does not match, the mesh will return an unauthorized error."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"hooks.js")," tab contains the JavaScript file referenced in the example mesh's ",(0,r.mdx)("inlineCode",{parentName:"p"},"plugins")," object. This file provides the required composer. Copy the file into the same folder as your ",(0,r.mdx)("inlineCode",{parentName:"p"},"mesh.json")," file before creating or updating your mesh."),(0,r.mdx)(p,{slots:"heading, code",repeat:"3",languages:"json, yaml, javascript",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"meshjson-1"},(0,r.mdx)("inlineCode",{parentName:"h4"},"mesh.json")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "Commerce",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://venia.magento.com/graphql"\n          }\n        }\n      }\n    ],\n    "plugins": [\n      {\n        "hooks": {\n          "beforeAll": {\n            "composer": "./hooks.js#isAuth",\n            "blocking": true\n          }\n        }\n      }\n    ],\n  }\n}\n')),(0,r.mdx)("h4",{id:"secretsyaml-1"},(0,r.mdx)("inlineCode",{parentName:"h4"},"secrets.yaml")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-yaml"},'TOKEN: "abcabcdefdefxyzxyz"\n')),(0,r.mdx)("h4",{id:"hooksjs"},(0,r.mdx)("inlineCode",{parentName:"h4"},"hooks.js")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'module.exports = {\n    isAuth: ({\n        context\n    }) => {\n        const {\n            headers,\n            secrets\n        } = context;\n\n        if (headers.authorization != secrets.TOKEN) {\n            return {\n                status: "ERROR",\n                message: "Unauthorized",\n            };\n        } else {\n            return {\n                status: "SUCCESS",\n                message: "Authorized",\n            };\n        }\n    },\n};\n')),(0,r.mdx)("p",null,"After adding the token from the ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file to your authorization header, run the following query:"),(0,r.mdx)(p,{slots:"heading, code",repeat:"3",languages:"json, json, json",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"query"},"Query"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  storeConfig {\n    base_url\n  }\n}\n")),(0,r.mdx)("h4",{id:"authorized-response"},"Authorized response"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "storeConfig": {\n      "base_url": "https://www.example.com"\n    }\n  },\n  "extensions": {}\n}\n')),(0,r.mdx)("h4",{id:"unauthorized-response"},"Unauthorized response"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "data": null,\n  "errors": [\n    "Unauthorized"\n  ]\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-mesh-advanced-secrets-md-0151954559977a5fd163.js.map