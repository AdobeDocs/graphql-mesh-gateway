{"version":3,"file":"component---src-pages-reference-handlers-json-schema-md-5202d1916aa3d55973ec.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/reference/handlers/json-schema.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"json-schema-handlers\"\n    }}>{`JSON schema handlers`}</h1>\n    <p>{`This handler allows you to load any remote REST service, and describe its request/response. With this handler, you can easily customize and control the built GraphQL schema.`}</p>\n    <p>{`For more information on creating JSON schemas, refer to this `}<a parentName=\"p\" {...{\n        \"href\": \"https://json-schema.org/learn/getting-started-step-by-step.html\"\n      }}>{`JSON schema tutorial`}</a>{`.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`JsonSchema`}</inlineCode>{` source in GraphQL Mesh uses a different capitalization scheme than other handlers. Using `}<inlineCode parentName=\"p\">{`JsonSchema`}</inlineCode>{` will result in an error.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`JSON schema handlers do not support `}<inlineCode parentName=\"p\">{`responseConfig`}</inlineCode>{` functionality.`}</p>\n    <p>{`To get started, use the handler in your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"MyApi\",\n      \"handler\": {\n        \"JsonSchema\": {\n          \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n          \"operations\": [\n            {\n              \"type\": \"Query\",\n              \"field\": \"users\",\n              \"path\": \"/users\",\n              \"method\": \"GET\",\n              \"responseSchema\": \"https://my-json-schema/users.json\"\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`JSON Schema handlers can also use local sources, see `}<a parentName=\"p\" {...{\n        \"href\": \"../handlers/index.md#reference-local-files-in-handlers\"\n      }}>{`Reference local file handlers`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"headers-from-context\"\n    }}>{`Headers from context`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"MyGraphQLApi\",\n      \"handler\": {\n        \"JsonSchema\": {\n          \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n          \"operationHeaders\": {\n            \"Authorization\": \"Bearer {context.headers['x-my-api-token']}\"\n          }\n        }\n      }\n    }\n  ]\n}\n`}</code></pre>\n    {\n      /* And for `mesh dev` or `mesh start`, you can pass the value using `x-my-graphql-api-token` HTTP header.\n      ### From Environment Variable\n      ```json\n      {\n       \"sources\": [\n         {\n           \"name\": \"MyGraphQLApi\",\n           \"handler\": {\n             \"JsonSchema\": {\n               \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n               \"operationHeaders\": {\n                 \"Authorization\": \"Bearer {env.MY_API_TOKEN}\"\n               }\n             }\n           }\n         }\n       ]\n      }\n      ### From Arguments\n      Mesh automatically generates arguments for operations if needed;\n      ```json\n      {\n       \"sources\": [\n         {\n           \"name\": \"MyGraphQLApi\",\n           \"handler\": {\n             \"JsonSchema\": {\n               \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n               \"operations\": [\n                 {\n                   \"type\": \"Query\",\n                   \"field\": \"user\",\n                   \"path\": \"/user/{args.id}\",\n                   \"method\": \"GET\",\n                   \"responseSchema\": \"./json-schemas/user.json\"\n                 }\n               ]\n             }\n           }\n         }\n       ]\n      }\n      ```\n      This example operation definition will generate a root field with `id: ID` argument, then Mesh will interpolate the expression in `path` to get `id` value from `args`.\n      ### From JSON Samples\n      Mesh can also load JSON samples from a remote service.\n      Just add a `json-samples` directory in your project root, and put the JSON samples in there (`responseSample: ./json/MyField.response.json` - Create a new folder like `json`).\n      By declaring the `responseSample`, you can use the JSON sample in the GraphQL schema.\n       `Mesh Sample Example - mesh.json file`\n      ```json\n      {\n       \"sources\": [\n         {\n           \"name\": \"MyGraphQLApi\",\n           \"handler\": {\n             \"JsonSchema\": {\n               \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n               \"operations\": [\n                 {\n                   \"type\": \"Query\",\n                   \"field\": \"MyField\",\n                   \"path\": \"/MyField?id={args.id}\",\n                   \"method\": \"GET\",\n                   \"responseSample\": \"./json/MyField.response.json\",\n                   \"responseTypeName\": \"MyResponseName\",\n                   \"argsTypeMap\": {\n                     \"id\": \"String\"\n                   }\n                 }\n               ]\n             }\n           }\n         }\n       ]\n      }\n      ```\n      For your `./jsons/MyField.response.json` file, any JSON file can be used.\n      ``` */\n    }\n    <h2 {...{\n      \"id\": \"query-parameters\"\n    }}>{`Query Parameters`}</h2>\n    <p>{`There are a few methods to define the query parameters, select the one that fits your needs (or combine them):`}</p>\n    <h3 {...{\n      \"id\": \"auto-declare\"\n    }}>{`Auto declare`}</h3>\n    <p>{`The mesh automatically generates arguments for operations if needed. Arguments are generated as nullable strings by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": [\n        {\n            \"name\": \"MyGraphQLApi\",\n            \"handler\": {\n                \"JsonSchema\": {\n                    \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n                    \"operations\": [\n                        {\n                            \"type\": \"Query\",\n                            \"field\": \"user\",\n                            \"path\": \"/user?id={args.id}\",\n                            \"method\": \"GET\",\n                            \"responseSchema\": \"./json-schemas/user.json\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"manual-declare\"\n    }}>{`Manual declare`}</h3>\n    <p>{`You can define the arguments of the operation using the `}<inlineCode parentName=\"p\">{`argTypeMap`}</inlineCode>{` config field, according to the JSON Schema spec.`}</p>\n    <p>{`In this example, we declare a `}<inlineCode parentName=\"p\">{`page`}</inlineCode>{` argument as an object with `}<inlineCode parentName=\"p\">{`limit`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`offset`}</inlineCode>{` properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"argTypeMap\": {\n        \"page\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"limit\": {\n                    \"type\": \"number\"\n                },\n                \"offset\": {\n                    \"type\": \"number\"\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`In addition, especially for non-primitive types, the arguments should be added to the path using the `}<inlineCode parentName=\"p\">{`queryParamArgMap`}</inlineCode>{` config field.`}</p>\n    <p>{`Here we add the `}<inlineCode parentName=\"p\">{`page`}</inlineCode>{` argument to the query parameters:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"queryParamArgMap\": {\n        \"page\": \"page\"\n    }\n}\n`}</code></pre>\n    <p>{`And here is the final config:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"sources\": [\n        {\n            \"name\": \"MyGraphQLApi\",\n            \"handler\": {\n                \"JsonSchema\": {\n                    \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n                    \"operations\": [\n                        {\n                            \"type\": \"Query\",\n                            \"field\": \"users\",\n                            \"path\": \"/getUsers\",\n                            \"method\": \"GET\",\n                            \"responseSample\": \"./jsons/MyField.response.json\",\n                            \"responseTypeName\": \"MyResponseName\",\n                            \"argTypeMap\": {\n                                \"page\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"limit\": {\n                                            \"type\": \"number\"\n                                        },\n                                        \"offset\": {\n                                            \"type\": \"number\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"queryParamArgMap\": {\n                                \"page\": \"page\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}\n`}</code></pre>\n    {\n      /* ### Global arguments\n      Query arguments could be defined globally, on the handler level, so they are added to all operations.\n      In this example, we declare the `limit` parameter with a default value of `10` and an `api_key` with a dynamic value taken from the environment:\n      ```json\n      {\n         \"sources\": [\n             {\n                 \"name\": \"MyGraphQLApi\",\n                 \"handler\": {\n                     \"JsonSchema\": {\n                         \"baseUrl\": \"https://some-service-url/endpoint-path/\",\n                         \"queryParams\": {\n                             \"limit\": 10,\n                             \"api_key\": {\n                                 \"env.MY_API_KEY\": null\n                             }\n                         }\n                     }\n                 }\n             }\n         ]\n      }\n      ```\n      <InlineAlert variant=\"info\" slots=\"text\"/>\n      `queryParams` are automatically added to the query. If the argument is defined both on the handler AND operation level, the operation level argument will be used. */\n    }\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`baseUrl`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`operationHeaders`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`JSON`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`schemaHeaders`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`JSON`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`operations`}</inlineCode>{` - (required) Array of:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`object`}</inlineCode>{`:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`description`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String (Query | Mutation | Subscription)`}</inlineCode>{`, required)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requestSchema`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requestSample`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requestTypeName`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`responseSchema`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`responseSample`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`responseTypeName`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`argTypeMap`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`JSON`}</inlineCode>{`)`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ignoreErrorResponses`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}\n        {\n          /*   \n          `path` (type: `String`, required)\n          `method` (type: `String (GET | HEAD | POST | PUT | DELETE | CONNECT | OPTIONS | TRACE | PATCH)`)\n          `headers` (type: `JSON`)\n          `binary` (type: `Boolean`) - If true, this operation cannot have requestSchema or requestSample\n          And the request body will be passed as binary with its mime type\n          unless you define an explicit Content-Type header\n          `object`:\n             `field` (type: `String`, required)\n             `description` (type: `String`)\n             `type` (type: `String (Query | Mutation | Subscription)`, required)\n             `requestSchema` (type: `Any`)\n             `requestSample` (type: `Any`)\n             `requestTypeName` (type: `String`)\n             `requestBaseBody` (type: `Any`) - This body will be merged with the request body sent with the underlying HTTP request\n             `responseSchema` (type: `Any`)\n             `responseSample` (type: `Any`)\n             `responseTypeName` (type: `String`)\n             `argTypeMap` (type: `JSON`)\n             `pubsubTopic` (type: `String`, required) \n          */\n        }\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}