{"version":3,"file":"component---src-pages-mesh-basic-transforms-naming-convention-md-562ebb2b12a221b0b614.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/basic/transforms/naming-convention.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"naming-convention-transform\"\n    }}><inlineCode parentName=\"h1\">{`naming-convention`}</inlineCode>{` transform`}</h1>\n    <p><inlineCode parentName=\"p\">{`naming-convention`}</inlineCode>{` transforms allow you to apply casing and other conventions to your response. In the example below, `}<inlineCode parentName=\"p\">{`enumValues`}</inlineCode>{` fields are converted to uppercase, while `}<inlineCode parentName=\"p\">{`fieldNames`}</inlineCode>{` are converted to camel case to enforce consistency.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"PWA\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://example2.com/graphql\"\n          }\n        },\n        \"transforms\": [\n          {\n            \"namingConvention\": {\n              \"enumValues\": \"upperCase\",\n              \"fieldNames\": \"camelCase\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The following example converts all of your `}<inlineCode parentName=\"p\">{`fieldNames`}</inlineCode>{` to lower case in the Adobe Commerce source:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSON\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"AdobeCommerce\",\n        \"transforms\": [\n          {\n            \"namingConvention\": {\n              \"fieldNames\": \"lowerCase\"\n            }\n          }\n        ],\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about `}<inlineCode parentName=\"p\">{`bare`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` modes, please read `}<a parentName=\"p\" {...{\n        \"href\": \"./bare-vs-wrap.md\"\n      }}><inlineCode parentName=\"a\">{`bare`}</inlineCode>{` vs `}<inlineCode parentName=\"a\">{`wrap`}</inlineCode></a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>\nThe following case options should not be used because they violate the <a href=\"https://spec.graphql.org/October2021/#sec-Names)\">GraphQL spec</a>. These options will likely be deprecated in the future.\n      <ul>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`capitalCase`}</inlineCode></li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dotCase`}</inlineCode></li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`headerCase`}</inlineCode></li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`noCase`}</inlineCode></li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`paramCase`}</inlineCode></li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pathCase`}</inlineCode></li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sentenceCase`}</inlineCode></li>\n      </ul>\n    </p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mode`}</inlineCode>{` (type: String (`}<inlineCode parentName=\"li\">{`bare`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`wrap`}</inlineCode>{`)) - Specify to apply naming-convention transforms to bare schema or by wrapping original schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`typeNames`}</inlineCode>{` (type: String (`}<inlineCode parentName=\"li\">{`camelCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`capitalCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`constantCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`dotCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`headerCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`noCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`paramCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`pascalCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`pathCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`sentenceCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`snakeCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`upperCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`lowerCase`}</inlineCode>{`))`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fieldNames`}</inlineCode>{` (type: String (`}<inlineCode parentName=\"li\">{`camelCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`capitalCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`constantCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`dotCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`headerCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`noCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`paramCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`pascalCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`pathCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`sentenceCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`snakeCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`upperCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`lowerCase`}</inlineCode>{`))`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`enumValues`}</inlineCode>{` (type: String (`}<inlineCode parentName=\"li\">{`camelCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`capitalCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`constantCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`dotCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`headerCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`noCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`paramCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`pascalCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`pathCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`sentenceCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`snakeCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`upperCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`lowerCase`}</inlineCode>{`))`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fieldArgumentNames`}</inlineCode>{` (type: String (`}<inlineCode parentName=\"li\">{`camelCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`capitalCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`constantCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`dotCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`headerCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`noCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`paramCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`pascalCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`pathCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`sentenceCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`snakeCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`upperCase`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`lowerCase`}</inlineCode>{`))`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","href","isMDXComponent"],"sourceRoot":""}