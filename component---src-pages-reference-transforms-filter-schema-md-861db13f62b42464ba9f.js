"use strict";(self.webpackChunkgraphql_mesh_gateway=self.webpackChunkgraphql_mesh_gateway||[]).push([[5464],{466:function(e,n,r){r.r(n),r.d(n,{_frontmatter:function(){return o},default:function(){return f}});var a,i=r(87462),t=r(63366),m=(r(15007),r(64983)),l=r(91515),s=["components"],o={},d=(a="InlineAlert",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,m.mdx)("div",e)}),p={_frontmatter:o},u=l.Z;function f(e){var n=e.components,r=(0,t.Z)(e,s);return(0,m.mdx)(u,(0,i.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,m.mdx)("h1",{id:"filterschema-transform"},(0,m.mdx)("inlineCode",{parentName:"h1"},"filterSchema")," transform"),(0,m.mdx)("p",null,"The ",(0,m.mdx)("inlineCode",{parentName:"p"},"filterSchema")," transform allows you to specify which schema elements to include or exclude in your mesh.\nYou can include or exclude entire queries and mutations and restrict which types can appear in your calls or which fields can appear in specific types."),(0,m.mdx)("p",null,"For example, you might want to exclude deprecated queries, mutations, and types from your schema so that your integration is not affected when these entities are removed."),(0,m.mdx)("h2",{id:"usage"},"Usage"),(0,m.mdx)("p",null,"Add the following configuration to your Mesh config file:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "transforms": [\n    {\n      "filterSchema": {\n        "mode": "bare | wrap",\n        "filters": [\n          "Type.!User",\n            // This will remove `User` type\n          "Type.!{User, Post}",\n            // This will remove `User` and `Post` types\n          "Query.!admins",\n            // This will remove field `admins` from `Query` type\n          "Mutation.!{addUser, removeUser}",\n            // This will remove fields `addUser` and `removeUser` from `Mutation` type\n          "User.{id, username, name, age}",\n            // This will remove all fields, from User type, except `id`, `username`, `name` and `age`\n          "Query.user.id",\n            // This will remove all args from field `user`, in Query type, except `id` only\n          "Query.user.!name",\n            // This will remove argument `name` from field `user`, in Query type\n          "Query.user.{id, name}",\n            // This will remove all args for field `user`, in Query type, except `id` and `name`\n          "Query.user.!{id, name}",\n            // This will remove args `id` and `name` from field `user`, in Query type\n          "Query.*.id",\n            // This will remove all args from all fields in Query type, except `id` only\n          "Query.*.!name",\n            // This will remove argument `name` from all fields in Query type\n          "Query.*.{id, name}",\n            // This will remove all args from all fields in Query type, except `id` and `name`\n          "Query.*.!{id, name}"\n            // This will remove args `id` and `name` from all fields in Query type\n        ]\n      }\n    }\n  ]\n}\n')),(0,m.mdx)("h2",{id:"example"},"Example"),(0,m.mdx)("p",null,"Let's assume you have the following schema:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  me: User\n  users: [User]\n  user(id: ID, name: String): User\n  admins: [User]\n}\n\ntype Mutation {\n  updateMyProfile(name: String, age: Int): User\n  addUser(username: String, name: String, age: Int): User\n  removeUser(id: ID): ID\n}\n\ntype User {\n  id: ID\n  username: String\n  password: String\n  name: String\n  age: Int\n  ipAddress: String\n}\n\ntype LooseType {\n  foo: String\n  bar: String\n}\n")),(0,m.mdx)("p",null,"With the following Filter Schema config:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "transforms": [\n    {\n      "filterSchema": {\n        "mode": "bare | wrap",\n        "filters": [\n          "Type.!LooseType",\n          "Query.!admins",\n          "Mutation.!{addUser, removeUser}",\n          "User.{username, name, age}",\n          "Query.user.!name"\n        ]\n      }\n    }\n  ]\n}\n')),(0,m.mdx)("p",null,"It would become the following schema:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  me: User\n  users: [User]\n  user(id: ID): User\n}\n\ntype Mutation {\n  updateMyProfile(name: String, age: Int): User\n}\n\ntype User {\n  username: String\n  name: String\n  age: Int\n}\n")),(0,m.mdx)(d,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,m.mdx)("p",null,"For information about ",(0,m.mdx)("inlineCode",{parentName:"p"},"bare")," and ",(0,m.mdx)("inlineCode",{parentName:"p"},"wrap")," modes, read the ",(0,m.mdx)("a",{parentName:"p",href:"index.md#two-different-modes"},"dedicated section"),"."),(0,m.mdx)("h2",{id:"config-api-reference"},"Config API Reference"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"mode")," (type: ",(0,m.mdx)("inlineCode",{parentName:"li"},"String")," (",(0,m.mdx)("inlineCode",{parentName:"li"},"bare")," | ",(0,m.mdx)("inlineCode",{parentName:"li"},"wrap"),")) - Specify to apply filter-schema transforms to bare schema or by wrapping the original schema"),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"filters")," (type: ",(0,m.mdx)("inlineCode",{parentName:"li"},"Array of String"),", required) - Array of filter rules")))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-reference-transforms-filter-schema-md-861db13f62b42464ba9f.js.map