{"version":3,"file":"component---src-pages-mesh-basic-handlers-graphql-md-9bc0fb1a4944ae79e244.js","mappings":"oSAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,qBACL,uBAAYC,WAAW,MAAO,WAAwB,cACzD,kBAAK,QAAM,uBAAYA,WAAW,KAAM,WAAwB,0DAChE,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,mXAuBP,kBAAK,gIACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,oMAaP,kBAAK,qDAAmD,cAAGA,WAAW,IAClE,KAAQ,gDACL,iCAAqC,2BAC5C,eACE,GAAM,wBACH,yBACL,kBAAK,yFACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,wXAiBP,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,2DACL,eACE,GAAM,iCACH,kCACL,kBAAK,mLAAiL,uBAAYC,WAAW,KAAM,UAAuB,6DAC1O,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,gTAgBP,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,4ZAsBP,eACE,GAAM,iBACH,kBACL,kBAAK,uDAAqD,cAAGA,WAAW,IACpE,KAAQ,mCACP,uBAAYA,WAAW,KAAM,uBAAuC,SAAO,cAAGA,WAAW,IAC1F,KAAQ,qFACP,uBAAYA,WAAW,KAAM,wBAAwC,4BAC1E,eACE,GAAM,wBACH,yBACL,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,YAAyB,YAAU,uBAAYA,WAAW,MAAO,UAAuB,mEACxI,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAO,6BAA2B,uBAAYA,WAAW,MAAO,OAAoB,QAAM,uBAAYA,WAAW,MAAO,OAAoB,QAG/J,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,UAAuB,YAAU,uBAAYA,WAAW,MAAO,UAAuB,uCACxI,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,iBAA8B,YAAU,uBAAYA,WAAW,MAAO,OAAoB,qFAC5I,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,oBAAiC,YAAU,uBAAYA,WAAW,MAAO,QAAqB,oFAChJ,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,oBAAiC,YAAU,uBAAYA,WAAW,MAAO,WAAwB,gDACnJ,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,UAAuB,YAAU,uBAAYA,WAAW,MAAO,uBAAoC,8CAqB1J,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/basic/handlers/graphql.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"graphql-handlers\"\n    }}><inlineCode parentName=\"h1\">{`graphql`}</inlineCode>{` handlers`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`graphql`}</inlineCode>{` handler allows you to connect to a GraphQL endpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"PWA\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"your_Venia_url\"\n          }\n        }\n      },\n      {\n        \"name\": \"AEM\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"<your_AEM_url>\"\n          }\n        }\n      }\n    ]\n  },\n}\n`}</code></pre>\n    <p>{`This handler allows you to load remote GraphQL schemas as part of your mesh. The GraphQL handler uses the following format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"MyGraphQLApi\",\n      \"handler\": {\n        \"graphql\": {\n          \"endpoint\": \"https://my-service-url/graphql\"\n        }\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`GraphQL handlers can also use local sources, see `}<a parentName=\"p\" {...{\n        \"href\": \"./index.md#reference-local-files-in-handlers\"\n      }}>{`Reference local file handlers`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"headers-from-context\"\n    }}>{`Headers from context`}</h2>\n    <p>{`The following example shows how to pass authorization headers to a GraphQL endpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"sources\": [\n    {\n      \"name\": \"MyGraphQLApi\",\n      \"handler\": {\n        \"graphql\": {\n          \"endpoint\": \"https://your-service/graphql\",\n          \"operationHeaders\": {\n            \"Authorization\": \"Bearer {context.headers['x-my-api-token']}\"\n          // Do not use capital letters in header names.\n          }\n        }\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Header names are automatically converted to lowercase.`}</p>\n    <h2 {...{\n      \"id\": \"provide-an-introspection-file\"\n    }}>{`Provide an introspection file`}</h2>\n    <p>{`If introspection is disabled in the production environment of your GraphQL source, and you want to provide your schema definition or introspection separately, you can use the `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` field to provide an online or local introspection file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"test_automation\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\",\n            \"source\": \"https://<domain>/myFile.graphql\"\n          }\n        }\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Adobe_Commerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\",\n            \"source\": \"schema.graphql\"\n          }\n        }\n      }\n    ],\n    \"files\": [\n      {\n        \"path\": \"schema.graphql\",\n        \"content\": \"type Query {hello: String}\"\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"local-schemas\"\n    }}>{`Local Schemas`}</h2>\n    <p>{`We recommend providing a local schema by using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../advanced/extend/index.md\"\n      }}><inlineCode parentName=\"a\">{`additionalTypeDefs`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../../advanced/extend/resolvers/programmatic-resolvers.md#additional-resolversjs\"\n      }}><inlineCode parentName=\"a\">{`additionalResolvers`}</inlineCode></a>{` configuration options.`}</p>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`endpoint`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required) - URL or file path for your remote GraphQL endpoint`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Local file types must be `}<inlineCode parentName=\"li\">{`.js`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`.ts`}</inlineCode>{`.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`source`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - Path to the introspection file`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`schemaHeaders`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Any`}</inlineCode>{`) - JSON object for adding headers to API calls for runtime schema introspection`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`operationHeaders`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`JSON`}</inlineCode>{`) - JSON object for adding headers to API calls for runtime operation execution`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useGETForQueries`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`) - An HTTP GET method for query operations`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`method`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String (GET | POST)`}</inlineCode>{`) - An HTTP method for GraphQL operations`}\n        {\n          /* \n          `subscriptionsEndpoint` (type: `String`) - A URL to your endpoint serving all subscription queries for this source\n          `customFetch` (type: `Any`) - Path to a custom W3 Compatible Fetch Implementation\n          `webSocketImpl` (type: `String`) - Path to a custom W3 Compatible WebSocket Implementation\n          `introspection` (type: `String`) - Path to the introspection\n          You can separately give schema introspection\n          `multipart` (type: `Boolean`) - Enable multipart/form data in order to support file uploads\n          `subscriptionsProtocol` (type: `String (SSE | WS | LEGACY_WS)`) - SSE - Server Sent Events\n          WS - New graphql-ws\n          LEGACY_WS - Legacy subscriptions-transport-ws\n          `retry` (type: `Int`) - Retry attempts if fails\n          `timeout` (type: `Int`) - Timeout in milliseconds\n          `batch` (type: `Boolean`) - Enable/Disable automatic query batching \n          */\n        }\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}