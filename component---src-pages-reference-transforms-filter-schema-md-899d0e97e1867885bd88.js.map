{"version":3,"file":"component---src-pages-reference-transforms-filter-schema-md-899d0e97e1867885bd88.js","mappings":"sNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,2BACL,uBAAYC,WAAW,MAAvB,gBAFH,eAGA,0BAAW,uBAAYA,WAAW,KAAvB,gBAAX,wPAEA,iMACA,eACE,GAAM,SADR,UAGA,gFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,6mDAwCL,eACE,GAAM,WADR,YAGA,kEACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBADZ,gbA6BL,+DACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,oUAmBL,4DACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBADZ,mNAkBL,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,4CAA6B,uBAAYC,WAAW,KAAvB,QAA7B,SAAsF,uBAAYA,WAAW,KAAvB,QAAtF,qBAA2J,cAAGA,WAAW,IACrK,KAAQ,gCAD+I,qBAA3J,MAGA,eACE,GAAM,wBADR,yBAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,YAAiF,uBAAYA,WAAW,MAAvB,UAAjF,MAA0I,uBAAYA,WAAW,MAAvB,QAA1I,OAAkM,uBAAYA,WAAW,MAAvB,QAAlM,qGACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,WAApB,YAAoF,uBAAYA,WAAW,MAAvB,mBAApF,wCAIL,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/reference/transforms/filter-schema.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"filterschema-transform\"\n    }}><inlineCode parentName=\"h1\">{`filterSchema`}</inlineCode>{` transform`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`filterSchema`}</inlineCode>{` transform allows you to specify which schema elements to include or exclude in your mesh.\nYou can include or exclude entire queries and mutations and restrict which types can appear in your calls or which fields can appear in specific types.`}</p>\n    <p>{`For example, you might want to exclude deprecated queries, mutations, and types from your schema so that your integration is not affected when these entities are removed.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Add the following configuration to your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"filterSchema\": {\n        \"mode\": \"bare | wrap\",\n        \"filters\": [\n          \"Type.!User\",\n            // This will remove \\`User\\` type\n          \"Type.!{User, Post}\",\n            // This will remove \\`User\\` and \\`Post\\` types\n          \"Query.!admins\",\n            // This will remove field \\`admins\\` from \\`Query\\` type\n          \"Mutation.!{addUser, removeUser}\",\n            // This will remove fields \\`addUser\\` and \\`removeUser\\` from \\`Mutation\\` type\n          \"User.{id, username, name, age}\",\n            // This will remove all fields, from User type, except \\`id\\`, \\`username\\`, \\`name\\` and \\`age\\`\n          \"Query.user.id\",\n            // This will remove all args from field \\`user\\`, in Query type, except \\`id\\` only\n          \"Query.user.!name\",\n            // This will remove argument \\`name\\` from field \\`user\\`, in Query type\n          \"Query.user.{id, name}\",\n            // This will remove all args for field \\`user\\`, in Query type, except \\`id\\` and \\`name\\`\n          \"Query.user.!{id, name}\",\n            // This will remove args \\`id\\` and \\`name\\` from field \\`user\\`, in Query type\n          \"Query.*.id\",\n            // This will remove all args from all fields in Query type, except \\`id\\` only\n          \"Query.*.!name\",\n            // This will remove argument \\`name\\` from all fields in Query type\n          \"Query.*.{id, name}\",\n            // This will remove all args from all fields in Query type, except \\`id\\` and \\`name\\`\n          \"Query.*.!{id, name}\"\n            // This will remove args \\`id\\` and \\`name\\` from all fields in Query type\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Let's assume you have the following schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  me: User\n  users: [User]\n  user(id: ID, name: String): User\n  admins: [User]\n}\n\ntype Mutation {\n  updateMyProfile(name: String, age: Int): User\n  addUser(username: String, name: String, age: Int): User\n  removeUser(id: ID): ID\n}\n\ntype User {\n  id: ID\n  username: String\n  password: String\n  name: String\n  age: Int\n  ipAddress: String\n}\n\ntype LooseType {\n  foo: String\n  bar: String\n}\n`}</code></pre>\n    <p>{`With the following Filter Schema config:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"filterSchema\": {\n        \"mode\": \"bare | wrap\",\n        \"filters\": [\n          \"Type.!LooseType\",\n          \"Query.!admins\",\n          \"Mutation.!{addUser, removeUser}\",\n          \"User.{username, name, age}\",\n          \"Query.user.!name\"\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`It would become the following schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  me: User\n  users: [User]\n  user(id: ID): User\n}\n\ntype Mutation {\n  updateMyProfile(name: String, age: Int): User\n}\n\ntype User {\n  username: String\n  name: String\n  age: Int\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about `}<inlineCode parentName=\"p\">{`bare`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` modes, read the `}<a parentName=\"p\" {...{\n        \"href\": \"index.md#two-different-modes\"\n      }}>{`dedicated section`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mode`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`bare`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`wrap`}</inlineCode>{`)) - Specify to apply filter-schema transforms to bare schema or by wrapping the original schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`filters`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of String`}</inlineCode>{`, required) - Array of filter rules`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}