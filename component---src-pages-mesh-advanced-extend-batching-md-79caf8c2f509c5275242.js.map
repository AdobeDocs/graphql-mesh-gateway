{"version":3,"file":"component---src-pages-mesh-advanced-extend-batching-md-79caf8c2f509c5275242.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/advanced/extend/batching.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"batching-with-api-mesh-for-adobe-developer-app-builder\"\n    }}>{`Batching with API Mesh for Adobe Developer App Builder`}</h1>\n    <p>{`Batching allows you to combine a group of requests into a single request, turning multiple queries into a single one. Compared to sending multiple queries simultaneously, batched requests result in better response times. They also avoid issues with rate-limiting.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Batching is only possible if the APIs included in your mesh support batching.`}</p>\n    <p>{`The following graphics depict the difference between queries with batched and unbatched calls:`}</p>\n    <h2 {...{\n      \"id\": \"unbatched\"\n    }}>{`Unbatched`}</h2>\n    <p>{`If your sources do not support batching, each query runs separately.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"359px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"60.62500000000001%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/5530d/unbatched.webp 320w\", \"/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/e956e/unbatched.webp 359w\"],\n            \"sizes\": \"(max-width: 359px) 100vw, 359px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/dd4a7/unbatched.png 320w\", \"/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/16540/unbatched.png 359w\"],\n            \"sizes\": \"(max-width: 359px) 100vw, 359px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/graphql-mesh-gateway/static/224b44a9fa9ecf87c7fb17fc5839c32a/16540/unbatched.png\",\n            \"alt\": \"unbatched\",\n            \"title\": \"unbatched\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"batched\"\n    }}>{`Batched`}</h2>\n    <p>{`If your sources support batching, and you batch with `}<a parentName=\"p\" {...{\n        \"href\": \"#batching-with-declarative-resolvers\"\n      }}>{`declarative`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"#batching-with-programmatic-resolvers\"\n      }}>{`programmatic resolvers`}</a>{`, multiple queries combine to form a single request.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"482px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"45.3125%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/5530d/batched.webp 320w\", \"/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/82cab/batched.webp 482w\"],\n            \"sizes\": \"(max-width: 482px) 100vw, 482px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/dd4a7/batched.png 320w\", \"/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/b58a3/batched.png 482w\"],\n            \"sizes\": \"(max-width: 482px) 100vw, 482px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/graphql-mesh-gateway/static/670bdab558ba588631bbc8e067175a7d/b58a3/batched.png\",\n            \"alt\": \"batched\",\n            \"title\": \"batched\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"the-n1-problem\"\n    }}>{`The `}<inlineCode parentName=\"h2\">{`n+1`}</inlineCode>{` problem`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`n+1`}</inlineCode>{` problem occurs when you request multiple pieces of information that cause the system to make multiple (`}<inlineCode parentName=\"p\">{`n`}</inlineCode>{`) queries to a source instead of using a single query. Since each query takes approximately the same amount of time, processing many queries can lead to degraded performance. In this example, a Reviews API contains reviews of your products by SKU. Without batching, you would need to query each SKU individually to return the corresponding reviews.`}</p>\n    <h2 {...{\n      \"id\": \"example-without-batching\"\n    }}>{`Example (without batching)`}</h2>\n    <p>{`Consider a scenario where you are using the following mesh, where the `}<inlineCode parentName=\"p\">{`Reviews`}</inlineCode>{` source is a third-party API that contains reviews for your products by SKU. Each review consists of a `}<inlineCode parentName=\"p\">{`review`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`customer_name`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`rating`}</inlineCode>{` field.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Products\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      },\n      {\n        \"name\": \"Reviews\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"<Reviews_API_URL>\",\n            \"useGETForQueries\": true\n          }\n        }\n      }\n    ],\n    \"additionalTypeDefs\": \"extend type ConfigurableProduct { customer_reviews: [productReviewslist]} \",\n    \"additionalResolvers\": [\n      {\n        \"targetFieldName\": \"customer_reviews\",\n        \"targetTypeName\": \"ConfigurableProduct\",\n        \"sourceName\": \"Reviews\",\n        \"sourceTypeName\": \"Query\",\n        \"sourceFieldName\": \"productsReviews\",\n        \"requiredSelectionSet\": \"{ sku }\",\n        \"sourceArgs\": {\n          \"sku\": \"{root.sku}\"\n        }\n      }\n    ],\n    \"responseConfig\": {\n      \"includeHTTPDetails\": true\n    }\n  }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Use `}<inlineCode parentName=\"p\">{`\"includeHTTPDetails\": true`}</inlineCode>{` to see response details that indicate how many calls your mesh made to each source.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"../extend/index.md\"\n      }}>{`custom resolver`}</a>{` extends the type `}<inlineCode parentName=\"p\">{`ConfigurableProduct`}</inlineCode>{` with a new `}<inlineCode parentName=\"p\">{`customer_reviews`}</inlineCode>{` field, which allows nesting review fields inside of queries against the Venia source. The resolver is composed of the following components:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The target (`}<inlineCode parentName=\"li\">{`targetTypeName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`targetFieldName`}</inlineCode>{`) - describes the queried field.`}</li>\n      <li parentName=\"ul\">{`The source (`}<inlineCode parentName=\"li\">{`sourceName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceTypeName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceFieldName`}</inlineCode>{`) - describes where the data is resolved for the target field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requiredSelectionSet`}</inlineCode>{` fetches the required arguments.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sourceArgs`}</inlineCode>{` maps the `}<inlineCode parentName=\"li\">{`requiredSelectionSet`}</inlineCode>{` argument to the source.`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Use `}<inlineCode parentName=\"p\">{`\"includeHTTPDetails\": true`}</inlineCode>{` to see response details that indicate how many calls your mesh made to each source.`}</p>\n    <p>{`The following query causes multiple calls to the Reviews API:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  products(filter: { sku: { in: [\"VD03\", \"VT12\"] } }) {\n    items {\n      ... on ConfigurableProduct {\n        sku\n        name\n        customer_reviews {\n          sku\n          reviews {\n            review\n            customer_name\n            rating\n          }\n        }\n        __typename\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"batching-with-declarative-resolvers\"\n    }}>{`Batching with declarative resolvers`}</h2>\n    <p>{`The following example explains how to use batching inside your mesh configuration file by using `}<a parentName=\"p\" {...{\n        \"href\": \"./resolvers/index.md\"\n      }}>{`declarative resolvers`}</a>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Reviews`}</inlineCode>{` source takes an array of product SKUs and returns an array of reviews for each SKU. To make a single network request to the `}<inlineCode parentName=\"p\">{`Reviews`}</inlineCode>{` source for multiple SKUs, add `}<inlineCode parentName=\"p\">{`keysArg`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`keyField`}</inlineCode>{` to your mesh.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Request batching using API Mesh requires a source endpoint capable of processing an array of values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Products\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \" https://venia.magento.com/graphql\"\n          }\n        }\n      },\n      {\n        \"name\": \"Reviews\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"<Reviews_API_URL>\",\n            \"useGETForQueries\": true\n          }\n        }\n      }\n    ],\n    \"additionalTypeDefs\": \"extend type ConfigurableProduct { customer_reviews: productReviewslist} \",\n    \"additionalResolvers\": [\n      {\n        \"targetFieldName\": \"customer_reviews\",\n        \"targetTypeName\": \"ConfigurableProduct\",\n        \"sourceName\": \"Reviews\",\n        \"sourceTypeName\": \"Query\",\n        \"sourceFieldName\": \"productsReviews\",\n        \"keysArg\": \"sku\",\n        \"keyField\": \"sku\"\n      }\n    ],\n    \"responseConfig\": {\n      \"includeHTTPDetails\": true\n    }\n  }\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`requiredSelectionSet`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sourceArgs`}</inlineCode>{` are replaced with `}<inlineCode parentName=\"p\">{`keysarg`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`keyField`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keysArg`}</inlineCode>{` provides the name of the primary key argument. For this example, the `}<inlineCode parentName=\"li\">{`keysArg`}</inlineCode>{` field is the argument name used when sending an array of SKUs to fetch multiple reviews.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keyField`}</inlineCode>{` provides the key value for each item in the batched query. For this example, the `}<inlineCode parentName=\"li\">{`keyField`}</inlineCode>{` indicates which Product field provides the SKU value to the review service.`}</li>\n    </ul>\n    <p>{`With the updated mesh, using the `}<a parentName=\"p\" {...{\n        \"href\": \"#example-without-batching\"\n      }}>{`previous query`}</a>{` returns the same information, but only makes one call to the `}<inlineCode parentName=\"p\">{`Reviews`}</inlineCode>{` source for multiple SKUs.`}</p>\n    <h2 {...{\n      \"id\": \"batching-with-programmatic-resolvers\"\n    }}>{`Batching with programmatic resolvers`}</h2>\n    <p>{`The following example explains how to use batching inside your mesh configuration file by using `}<a parentName=\"p\" {...{\n        \"href\": \"./resolvers/programmatic-resolvers.md\"\n      }}>{`programmatic resolvers`}</a>{`.`}</p>\n    <p>{`In the following example, `}<inlineCode parentName=\"p\">{`args.skus`}</inlineCode>{` creates an array of SKUs to query instead of querying each SKU individually. The `}<inlineCode parentName=\"p\">{`valuesFromResults`}</inlineCode>{` object is optional and allows you to filter, sort, and transform your results.`}</p>\n    <p>{`In the following example, you would create your mesh configuration file (`}<inlineCode parentName=\"p\">{`mesh.json`}</inlineCode>{`) and the referenced JavaScript file (`}<inlineCode parentName=\"p\">{`resolver.js`}</inlineCode>{`) in the same directory.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`resolvers.js`}</inlineCode>{` file contains similar logic to the `}<inlineCode parentName=\"p\">{`additionalResolvers.js`}</inlineCode>{` file in `}<a parentName=\"p\" {...{\n        \"href\": \"./resolvers/programmatic-resolvers.md#additional-resolversjs\"\n      }}>{`Programmatic Resolvers`}</a>{`, but adds batching and logging.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"json, javascript, graphql\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"meshjson\"\n    }}><inlineCode parentName=\"h4\">{`mesh.json`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"AdobeCommerce\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      },\n      {\n        \"name\": \"DiscountsAPI\",\n        \"handler\": {\n          \"JsonSchema\": {\n            \"baseUrl\": \"https://random-discounts-generator.apimesh-adobe-test.workers.dev\",\n            \"operations\": [\n              {\n                \"type\": \"Query\",\n                \"field\": \"discounts\",\n                \"path\": \"/getDiscounts?skus={args.skus}\",\n                \"method\": \"GET\",\n                \"requestSample\": \"https://random-discounts-generator.apimesh-adobe-test.workers.dev/getDiscounts?skus=[%27abc%27,%20%27xyz%27]\",\n                \"responseSample\": \"https://random-discounts-generator.apimesh-adobe-test.workers.dev/getDiscounts?skus=[%27abc%27,%20%27xyz%27]\",\n                \"argTypeMap\": {\n                  \"skus\": {\n                    \"type\": \"array\"\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    ],\n    \"additionalResolvers\": [\"./resolvers.js\"]\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"resolverjs\"\n    }}><inlineCode parentName=\"h4\">{`resolver.js`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`module.exports = {\n  resolvers: {\n    ConfigurableProduct: {\n      special_price: {\n        selectionSet:\n          \"{ name price_range { maximum_price { final_price { value } } } }\",\n        resolve: (root, args, context, info) => {\n          return context.DiscountsAPI.Query.discounts({\n            root,\n            key: root.sku,\n            argsFromKeys: (skus) => ({ skus }),\n            valuesFromResults: (results) =>\n              results.map(({ discount }) => discount),\n            context,\n            info,\n            selectionSet: \"{ sku discount }\",\n          })\n            .then((discount) => {\n              let max = 0;\n\n              try {\n                max = root.price_range.maximum_price.final_price.value;\n              } catch (e) {\n                max = 0;\n              }\n\n              if (discount) {\n                return max * ((100 - discount) / 100);\n              } else {\n                return max;\n              }\n            })\n            .catch((e) => {\n              context.logger.error(e);\n              return null;\n            });\n        },\n      },\n    },\n  },\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-query\"\n    }}>{`Sample query`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  products(filter: {sku: {in: [\"VD03\", \"VT12\"]}}) {\n    items {\n      name\n      sku\n      special_price\n      price_range {\n        maximum_price {\n          final_price {\n            value\n          }\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","repeat","languages","isMDXComponent"],"sourceRoot":""}