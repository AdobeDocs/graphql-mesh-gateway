{"version":3,"file":"component---src-pages-reference-transforms-federation-md-eef4eb4807281a9fb0d8.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/reference/transforms/federation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"federation-transform\"\n    }}><inlineCode parentName=\"h1\">{`federation`}</inlineCode>{` transform`}</h1>\n    <p><inlineCode parentName=\"p\">{`federation`}</inlineCode>{` transform allows you to add resolvers and directives to conform to the federation specification. Much of the federation source code could be reused to ensure that it is compliant to the specification. This transform uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/0xR/graphql-transform-federation\"\n      }}><inlineCode parentName=\"a\">{`graphql-transform-federation`}</inlineCode></a>{` package.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Add the following configuration to your Mesh config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"transforms\": [\n    {\n      \"federation\": {\n        \"types\": [\n          {\n            \"name\": \"Query\",\n            \"config\": {\n              \"extend\": true\n            }\n          },\n          {\n            \"name\": \"Product\",\n            \"config\": {\n              \"extend\": true,\n              \"key\": {\n                \"Fields\": [\n                  \"id\"\n              ],\n            },\n              \"fields\": [\n                {\n                  \"name\": \"id\",\n                  \"external\": true\n                }\n              ],\n              \"resolveReference\": {\n                \"queryFieldName\": \"user\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"add-reference-resolver-as-a-code-file\"\n    }}>{`Add Reference Resolver as a Code File`}</h3>\n    <p>{`To add more complex business logic, you can point to a code file that exports a resolver function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"resolveReference\": \"https://my-site.com/userResolveReference.js\"\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`./userResolveReference.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// So we can point to an existing query field to resolve that entity\nexport default function (root, context, info)  {\n  return context.accounts.Query.user({ root, args: { id: root.id }, context, info })\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`types`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`Array of Object`}</inlineCode>{`, required):`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`name`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{`, required)`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><inlineCode parentName=\"p\">{`config`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`Object`}</inlineCode>{`):`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">\n                <p parentName=\"li\"><inlineCode parentName=\"p\">{`key`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`Array of Object`}</inlineCode>{`):`}</p>\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n                </ul>\n              </li>\n              <li parentName=\"ul\">\n                <p parentName=\"li\"><inlineCode parentName=\"p\">{`shareable`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`Boolean`}</inlineCode>{`)`}</p>\n              </li>\n              <li parentName=\"ul\">\n                <p parentName=\"li\"><inlineCode parentName=\"p\">{`extend`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`Boolean`}</inlineCode>{`)`}</p>\n              </li>\n              <li parentName=\"ul\">\n                <p parentName=\"li\"><inlineCode parentName=\"p\">{`fields`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`Array of Object`}</inlineCode>{`, required):`}</p>\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`, required)`}</li>\n                  <li parentName=\"ul\"><inlineCode parentName=\"li\">{`config`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n                    <ul parentName=\"li\">\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`external`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}</li>\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`provides`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}\n                        <ul parentName=\"li\">\n                          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n                        </ul>\n                      </li>\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requires`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}\n                        <ul parentName=\"li\">\n                          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n                        </ul>\n                      </li>\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tag`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`):`}\n                        <ul parentName=\"li\">\n                          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n                        </ul>\n                      </li>\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`inaccessible`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)`}</li>\n                      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`override`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`):`}\n                        <ul parentName=\"li\">\n                          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`from`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n              <li parentName=\"ul\">\n                <p parentName=\"li\"><inlineCode parentName=\"p\">{`resolveReference`}</inlineCode>{` - One of the following:`}</p>\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\">\n                    <p parentName=\"li\"><inlineCode parentName=\"p\">{`String`}</inlineCode></p>\n                  </li>\n                  <li parentName=\"ul\">\n                    <p parentName=\"li\"><inlineCode parentName=\"p\">{`object`}</inlineCode>{`:`}</p>\n                    <ul parentName=\"li\">\n                      <li parentName=\"ul\">\n                        <p parentName=\"li\"><inlineCode parentName=\"p\">{`queryFieldName`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{`, required) - Name of root field name that resolves the reference`}</p>\n                      </li>\n                      <li parentName=\"ul\">\n                        <p parentName=\"li\"><inlineCode parentName=\"p\">{`args`}</inlineCode>{` (type: `}<inlineCode parentName=\"p\">{`JSON`}</inlineCode>{`) - Configure the arguments for the field:`}</p>\n                        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                            \"className\": \"language-json\"\n                          }}>{`{\n    \"args\": {\n        \"someArg\": \"{root.someKeyValue}\"\n    }\n}\n`}</code></pre>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}