{"version":3,"file":"component---src-pages-mesh-best-practices-index-md-274e723e092a3082fc66.js","mappings":"oSAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,0DACH,2DACL,kBAAK,4QACL,eACE,GAAM,kBACH,QAAM,uBAAYC,WAAW,MAAO,OAAoB,aAC7D,kBAAK,QAAM,uBAAYA,WAAW,KAAM,OAAoB,4GAA0G,uBAAYA,WAAW,KAAM,KAAkB,iWACrN,eACE,GAAM,4BACH,+BACL,kBAAK,0EAAwE,uBAAYA,WAAW,KAAM,WAAwB,2GAAyG,uBAAYA,WAAW,KAAM,UAAuB,MAAI,uBAAYA,WAAW,KAAM,iBAA8B,UAAQ,uBAAYA,WAAW,KAAM,UAAuB,YAC1Z,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,k+BAyCP,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,QAAM,uBAAYC,WAAW,KAAM,8BAA2C,yFACnF,kBAAK,QAAM,cAAGA,WAAW,IACrB,KAAQ,2CACL,mBAAuB,sBAAoB,uBAAYA,WAAW,KAAM,uBAAoC,gBAAc,uBAAYA,WAAW,KAAM,oBAAiC,iJAC/L,oBACE,eAAIA,WAAW,MAAO,gBAAc,uBAAYA,WAAW,MAAO,kBAA+B,MAAI,uBAAYA,WAAW,MAAO,mBAAgC,qCACnK,eAAIA,WAAW,MAAO,gBAAc,uBAAYA,WAAW,MAAO,cAA2B,MAAI,uBAAYA,WAAW,MAAO,kBAA+B,MAAI,uBAAYA,WAAW,MAAO,mBAAgC,mEAChO,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,wBAAqC,qCACvF,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,cAA2B,cAAY,uBAAYA,WAAW,MAAO,wBAAqC,8BAE9J,kBAAK,kEACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBACV,qVAoBP,eACE,GAAM,oBACH,qBACL,kBAAK,QAAM,uBAAYA,WAAW,KAAM,WAAwB,iIAA+H,uBAAYA,WAAW,KAAM,WAAwB,mCAAiC,uBAAYA,WAAW,KAAM,WAAwB,SAAO,uBAAYA,WAAW,KAAM,YAAyB,mBACvY,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,yGACL,qBAAK,iBAAMC,WAAW,MAClB,UAAa,iBACV,6nCAsCP,mBAAG,uBAAYA,WAAW,KAAM,wBAAqC,SAAO,uBAAYA,WAAW,KAAM,cAA2B,uBAAqB,uBAAYA,WAAW,KAAM,WAAwB,SAAO,uBAAYA,WAAW,KAAM,YAAyB,MAC3Q,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,WAAwB,0EAAwE,uBAAYA,WAAW,MAAO,WAAwB,8FACxM,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,YAAyB,sFAAoF,uBAAYA,WAAW,MAAO,YAAyB,kFAExN,kBAAK,qCAAmC,cAAGA,WAAW,IAClD,KAAQ,6BACL,kBAAsB,kEAAgE,uBAAYA,WAAW,KAAM,WAAwB,8BAGrJ,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/best-practices/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"batching-with-api-mesh-for-adobe-developer-app-builder\"\n    }}>{`Batching with API Mesh for Adobe Developer App Builder`}</h1>\n    <p>{`Batching allows you to combine a group of requests into a single request, turning multiple queries into a single one. Compared to sending multiple queries simultaneously, batched requests result in better response times. They also avoid issues with rate-limiting.`}</p>\n    <h2 {...{\n      \"id\": \"the-n1-problem\"\n    }}>{`The `}<inlineCode parentName=\"h2\">{`n+1`}</inlineCode>{` problem`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`n+1`}</inlineCode>{` problem occurs when you request multiple pieces of information that cause the system to make multiple (`}<inlineCode parentName=\"p\">{`n`}</inlineCode>{`) queries to a source instead of using a single query. Since each query takes approximately the same amount of time, processing many queries can lead to degraded performance. In this example, a Reviews API contains reviews of your products by SKU. Without batching, you would need to query each SKU individually to return the corresponding reviews.`}</p>\n    <h2 {...{\n      \"id\": \"example-without-batching\"\n    }}>{`Example (without batching)`}</h2>\n    <p>{`Consider a scenario where you are using the following mesh, where the `}<inlineCode parentName=\"p\">{`Reviews`}</inlineCode>{` source is a third-party API that contains reviews for your products by SKU. Each review consists of a `}<inlineCode parentName=\"p\">{`review`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`customer_name`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`rating`}</inlineCode>{` field.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"Products\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      },\n      {\n        \"name\": \"Reviews\",\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"<Reviews_API_URL>\",\n            \"useGETForQueries\": true\n          }\n        }\n      }\n    ],\n    \"additionalTypeDefs\": \"extend type ConfigurableProduct { customer_reviews: [productReviewslist]} \",\n    \"additionalResolvers\": [\n      {\n        \"targetFieldName\": \"customer_reviews\",\n        \"targetTypeName\": \"ConfigurableProduct\",\n        \"sourceName\": \"Reviews\",\n        \"sourceTypeName\": \"Query\",\n        \"sourceFieldName\": \"productsReviews\",\n        \"requiredSelectionSet\": \"{ sku }\",\n        \"sourceArgs\": {\n          \"sku\": \"{root.sku}\"\n        }\n      }\n    ],\n    \"responseConfig\": {\n      \"includeHTTPDetails\": true\n    }\n  }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Use `}<inlineCode parentName=\"p\">{`\"includeHTTPDetails\": true`}</inlineCode>{` to see response details that indicate how many calls your mesh made to each source.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"../advanced/extending-unified-schema.md\"\n      }}>{`custom resolver`}</a>{` extends the type `}<inlineCode parentName=\"p\">{`ConfigurableProdcut`}</inlineCode>{` with a new `}<inlineCode parentName=\"p\">{`customer_reviews`}</inlineCode>{` field, which allows nesting review fields inside of queries against the Venia source. The resolver is composed of the following components:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The target (`}<inlineCode parentName=\"li\">{`targetTypeName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`targetFieldName`}</inlineCode>{`) - describes the queried field.`}</li>\n      <li parentName=\"ul\">{`The source (`}<inlineCode parentName=\"li\">{`sourceName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceTypeName`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`sourceFieldName`}</inlineCode>{`) - describes where the data is resolved for the target field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`requiredSelectionSet`}</inlineCode>{` fetches the required arguments.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sourceArgs`}</inlineCode>{` maps the `}<inlineCode parentName=\"li\">{`requiredSelectionSet`}</inlineCode>{` argument to the source.`}</li>\n    </ul>\n    <p>{`The following query causes multiple calls to the Reviews API:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  products(filter: { sku: { in: [\"VD03\", \"VT12\"] } }) {\n    items {\n      ... on ConfigurableProduct {\n        sku\n        name\n        customer_reviews {\n          sku\n          reviews {\n            review\n            customer_name\n            rating\n          }\n        }\n        __typename\n      }\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"batching-example\"\n    }}>{`Batching example`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Reviews`}</inlineCode>{` source takes an array of product SKUs and returns an array of reviews for each SKU. To make a single network request to the `}<inlineCode parentName=\"p\">{`Reviews`}</inlineCode>{` source for multiple SKUs, add `}<inlineCode parentName=\"p\">{`keysArg`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`keyField`}</inlineCode>{` to your mesh.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Request batching using API Mesh requires a source endpoint capable of processing an array of values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"meshConfig\": {\n        \"sources\": [\n            {\n                \"name\": \"Products\",\n                \"handler\": {\n                    \"graphql\": {\n                        \"endpoint\": \" https://venia.magento.com/graphql\"\n                    }\n                }\n            },\n            {\n                \"name\": \"Reviews\",\n                \"handler\": {\n                    \"graphql\": {\n                        \"endpoint\": \"<Reviews_API_URL>\",\n                        \"useGETForQueries\":true\n                    }\n                }\n            }\n        ],\n        \"additionalTypeDefs\": \"extend type ConfigurableProduct { customer_reviews: productReviewslist} \" ,\n        \"additionalResolvers\" : [\n          {\n            \"targetFieldName\" : \"customer_reviews\",\n            \"targetTypeName\" : \"ConfigurableProduct\",\n            \"sourceName\": \"Reviews\",\n            \"sourceTypeName\": \"Query\",\n            \"sourceFieldName\": \"productsReviews\",\n            \"keysArg\": \"sku\",\n            \"keyField\": \"sku\"\n        }],\n        \"responseConfig\": {\n            \"includeHTTPDetails\": true\n        }\n    }\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`requiredSelectionSet`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sourceArgs`}</inlineCode>{` are replaced with `}<inlineCode parentName=\"p\">{`keysarg`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`keyField`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keysArg`}</inlineCode>{` provides the name of the primary key argument. For this example, the `}<inlineCode parentName=\"li\">{`keysArg`}</inlineCode>{` field is the argument name used when sending an array of SKUs to fetch multiple reviews.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keyField`}</inlineCode>{` provides the key-value for each item in the batched query. For this example, the `}<inlineCode parentName=\"li\">{`keyField`}</inlineCode>{` indicates which Product field provides the SKU value to the review service.`}</li>\n    </ul>\n    <p>{`With the updated mesh, using the `}<a parentName=\"p\" {...{\n        \"href\": \"#example-without-batching\"\n      }}>{`previous query`}</a>{` returns the same information, but only makes one call to the `}<inlineCode parentName=\"p\">{`Reviews`}</inlineCode>{` source for multiple SKUs.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}