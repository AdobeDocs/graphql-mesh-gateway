"use strict";(self.webpackChunkgraphql_mesh_gateway=self.webpackChunkgraphql_mesh_gateway||[]).push([[9486],{41306:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return m},default:function(){return u}});var s=a(87462),t=a(45987),r=(a(35776),a(3905)),o=a(91515);const d=["components"],m={},i=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",n)},l=i("InlineAlert"),c=i("CodeBlock"),p={_frontmatter:m},h=o.Z;function u(e){let{components:n}=e,a=(0,t.Z)(e,d);return(0,r.mdx)(h,(0,s.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"secrets-management"},"Secrets management"),(0,r.mdx)("p",null,"API Mesh for Adobe Developer App Builder allows you to manage secrets or variables for a mesh. You can use these secrets in your mesh configuration file to securely manage sensitive information. When creating or updating a mesh, you can provide a separate file that defines your secrets. API Mesh encrypts secrets using AES 512-bit encryption."),(0,r.mdx)("p",null,"For security purposes, you cannot receive the secrets once you define them when creating or updating a mesh. For example, running an ",(0,r.mdx)("inlineCode",{parentName:"p"},"aio api-mesh get")," command returns your mesh with the values defined within the mesh configuration file, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"{context.secrets.SECRET}")," and does not return the actual secret's value."),(0,r.mdx)("h2",{id:"create-a-secretsyaml-file"},"Create a ",(0,r.mdx)("inlineCode",{parentName:"h2"},"secrets.yaml")," file"),(0,r.mdx)("p",null,"Create a ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file that contains your secrets. You can modify the file name as necessary. Secrets management only supports the ",(0,r.mdx)("inlineCode",{parentName:"p"},"yaml")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"yml")," file extensions. The file should be in the following format:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-yaml"},'secret: "secret-value"\n')),(0,r.mdx)("p",null,"The following example contains a Bash command as a value for the ",(0,r.mdx)("inlineCode",{parentName:"p"},"HOME")," secret. API Mesh supports Bash commands with or without brackets, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"$HOME")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"$[HOME]"),"."),(0,r.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Bash commands are not supported in Windows environments."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-yaml"},'AEM: \n  TOKEN: "my-token"\n  AEMUSERNAME: "user-name"\n  adminname: "admin-name"\n\nHOME: \'\\${HOME}\'\n')),(0,r.mdx)(l,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"You cannot escape the ",(0,r.mdx)("inlineCode",{parentName:"p"},"$")," character in secrets files. This means that a secret's value cannot contain ",(0,r.mdx)("inlineCode",{parentName:"p"},"$"),", unless it is part of a Bash command."),(0,r.mdx)("h2",{id:"add-secrets-to-your-mesh-configuration-file"},"Add secrets to your mesh configuration file"),(0,r.mdx)("p",null,"Once you have created your ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file, you can reference the secrets in your mesh configuration file using the following format:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "Adobe Commerce",\n        "handler": {\n          "graphql": {\n            "endpoint": "venia.magento.com/graphql",\n            "operationHeaders": {\n              "secret": "{context.<secret_file>.<secret-name>}"\n            }\n          }\n        }\n      }\n    ],\n  }\n}\n')),(0,r.mdx)("p",null,"For more complex use cases, see ",(0,r.mdx)("a",{parentName:"p",href:"#examples"},"Examples"),"."),(0,r.mdx)("h2",{id:"create-or-update-your-mesh-secrets"},"Create or update your mesh secrets"),(0,r.mdx)("p",null,"When you create or update a mesh that you want to include secrets in, add the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--secrets")," flag followed by the path to your secrets file. If you do not provide the secrets file when updating a mesh that has secrets, the secrets` values are overwritten by their literal references."),(0,r.mdx)(c,{slots:"heading, code",repeat:"2",languages:"bash, bash",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"create"},"Create"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"aio api-mesh create mesh.json --secrets secrets.yaml\n")),(0,r.mdx)("h4",{id:"update"},"Update"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"aio api-mesh update mesh.json --secrets secrets.yaml\n")),(0,r.mdx)("p",null,"Your mesh now contains the secrets defined in your ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file."),(0,r.mdx)("h2",{id:"examples"},"Examples"),(0,r.mdx)("p",null,"The following examples demonstrate different use cases in which using secrets management is beneficial."),(0,r.mdx)("h3",{id:"header-reflection"},"Header reflection"),(0,r.mdx)("p",null,"The following example mesh configuration uses a header reflection service to demonstrate how you can pass your secrets as headers. This can be useful to test and debug your configuration."),(0,r.mdx)(l,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Do not use sensitive data with this example, since it is designed to display your secrets as headers."),(0,r.mdx)(c,{slots:"heading, code",repeat:"2",languages:"json, yaml",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"meshjson"},(0,r.mdx)("inlineCode",{parentName:"h4"},"mesh.json")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "headersData",\n        "handler": {\n          "JsonSchema": {\n            "baseUrl": "<header-reflection-service>",\n            "operations": [\n              {\n                "type": "Query",\n                "field": "data",\n                "path": "/",\n                "method": "GET",\n                "responseSchema": "./getHeadersSchema.json"\n              }\n            ],\n            "operationHeaders": {\n              "secretHeader": "{context.secrets.HOME}",\n              "secretAEMHeader": "{context.secrets.AEM.TOKEN}"\n            }\n          }\n        }\n      }\n    ],\n    "files": [\n      {\n        "path": "./getHeadersSchema.json",\n        "content": "{\\"$schema\\":\\"http://json-schema.org/draft-07/schema#\\",\\"type\\":\\"object\\",\\"required\\":[\\"headerKeys\\",\\"headerValues\\",\\"headers\\"],\\"properties\\":{\\"headerKeys\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}},\\"headerValues\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}},\\"headers\\":{\\"type\\":\\"object\\"}}}"\n      }\n    ]\n  }\n}\n')),(0,r.mdx)("h4",{id:"secretsyaml"},(0,r.mdx)("inlineCode",{parentName:"h4"},"secrets.yaml")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-yaml"},'AEM: \n  TOKEN: "my-token"\n  AEMUSERNAME: "user-name"\n  adminname: "admin-name"\n\nHOME: \'\\${HOME}\'\n')),(0,r.mdx)("p",null,"Use the following GraphQL query to retrieve the headers:"),(0,r.mdx)(c,{slots:"heading, code",repeat:"2",languages:"json, json",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"graphql"},"GraphQL"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  data {\n    headers\n  }\n}\n")),(0,r.mdx)("h4",{id:"response"},"Response"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "data": {\n      "headers": {\n        "accept-encoding": "gzip, br",\n        "cf-connecting-ip": "0.0.0.0",\n        "cf-ipcountry": "US",\n        "cf-ray": "abc123abc123",\n        "cf-visitor": "{\\"scheme\\":\\"https\\"}",\n        "connection": "Keep-Alive",\n        "host": "header-reflection-service",\n        "x-forwarded-proto": "https",\n        "x-real-ip": "0.0.0.0"\n      }\n    }\n  },\n  "extensions": {}\n}\n')),(0,r.mdx)("h3",{id:"authorization"},"Authorization"),(0,r.mdx)("p",null,"The following example provides a simple authorization test. This mesh only returns a valid response, if the ",(0,r.mdx)("inlineCode",{parentName:"p"},"TOKEN")," in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file is also passed as an authorization header in the request. If the token does not match, the mesh will return an unauthorized error."),(0,r.mdx)(c,{slots:"heading, code",repeat:"2",languages:"json, yaml",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"meshjson-1"},(0,r.mdx)("inlineCode",{parentName:"h4"},"mesh.json")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "meshConfig": {\n    "sources": [\n      {\n        "name": "Commerce",\n        "handler": {\n          "graphql": {\n            "endpoint": "https://venia.magento.com/graphql"\n          }\n        }\n      }\n    ],\n    "plugins": [\n      {\n        "hooks": {\n          "beforeAll": {\n            "composer": "./hooks.js#isAuth",\n            "blocking": true\n          }\n        }\n      }\n    ],\n    "files": [\n      {\n        "path": "./hooks.js",\n        "content": "module.exports = {\\r\\n  isAuth: ({ context }) => {\\r\\n    const { headers, secrets } = context;\\r\\n\\r\\n    if (headers.authorization != secrets.TOKEN) {\\r\\n      return {\\r\\n        status: \\"ERROR\\",\\r\\n        message: \\"Unauthorized\\",\\r\\n      };\\r\\n    } else {\\r\\n      return {\\r\\n        status: \\"SUCCESS\\",\\r\\n        message: \\"Authorized\\",\\r\\n      };\\r\\n    }\\r\\n  },\\r\\n};\\r\\n"\n      }\n    ]\n  }\n}\n')),(0,r.mdx)("h4",{id:"secretsyaml-1"},(0,r.mdx)("inlineCode",{parentName:"h4"},"secrets.yaml")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-yaml"},'TOKEN: "abcabcdefdefxyzxyz"\n')),(0,r.mdx)("p",null,"After adding the token from the ",(0,r.mdx)("inlineCode",{parentName:"p"},"secrets.yaml")," file to your authorization header, run the following query:"),(0,r.mdx)(c,{slots:"heading, code",repeat:"3",languages:"json, json, json",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"query"},"Query"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  storeConfig {\n    base_Url\n  }\n}\n")),(0,r.mdx)("h4",{id:"authorized-response"},"Authorized response"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "storeConfig": {\n      "base_url": "cache_url"\n    }\n  },\n  "extensions": {}\n}\n')),(0,r.mdx)("h4",{id:"unauthorized-response"},"Unauthorized response"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "data": null,\n  "errors": [\n    "Unauthorized"\n  ]\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-mesh-advanced-secrets-md-0bd422bafaee5ad6fd96.js.map