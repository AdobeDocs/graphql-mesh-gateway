{"version":3,"file":"component---src-pages-gateway-transforms-rename-md-47c62b895014dea0894b.js","mappings":"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","sources":["webpack://graphql-mesh-gateway/./src/pages/gateway/transforms/rename.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rename-transform\"\n    }}><inlineCode parentName=\"h1\">{`rename`}</inlineCode>{` transform`}</h1>\n    <p><inlineCode parentName=\"p\">{`rename`}</inlineCode>{` transforms allow you to rename a GraphQL field, type, or field argument. Renaming allows you to avoid conflicting names, simplify complicated names, and make queries look more like mutations. In the example below, we rename a long API field name from `}<inlineCode parentName=\"p\">{`integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost`}</inlineCode>{` to the shorter `}<inlineCode parentName=\"p\">{`CreateCustomerToken`}</inlineCode>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`rename`}</inlineCode>{` elements can contain arrays of individual renaming operations, defined in separate `}<inlineCode parentName=\"p\">{`renames`}</inlineCode>{` objects. Each of these objects must define the `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{` values.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You can use `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\n      }}>{`RegEx flags`}</a>{` to enable the use of regular expressions when renaming using this transform. For example, you could use the key-value pair `}<inlineCode parentName=\"p\">{`field: api(.*)`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{` object to rename any field of the corresponding type that begins with \"api\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"CommerceREST\",\n        \"handler\": {\n          \"openapi\": {\n            \"source\": \"https://www.example.com/rest/all/schema?services=all\"\n          }\n        },\n          \"transforms\": [\n            {\n              \"rename\": {\n              \"renames\": [\n                {\n                  \"from\": {\n                    \"type\": \"Mutation\",\n                    \"field\": \"integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost\"\n                  },\n                  \"to\": {\n                    \"type\": \"Mutation\",\n                    \"field\": \"CreateCustomerToken\"\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The following example renames the `}<inlineCode parentName=\"p\">{`currency`}</inlineCode>{` query field to `}<inlineCode parentName=\"p\">{`currencyType`}</inlineCode>{` in the Adobe Commerce source:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"meshConfig\": {\n    \"sources\": [\n      {\n        \"name\": \"AdobeCommerce\",\n        \"transforms\": [\n          {\n            \"rename\": {\n              \"renames\": [\n                {\n                  \"from\": {\n                    \"type\": \"Query\",\n                    \"field\": \"currency\"\n                  },\n                  \"to\": {\n                    \"type\": \"Query\",\n                    \"field\": \"currencyType\"\n                  }\n                }\n              ]\n            }\n          }\n        ],\n        \"handler\": {\n          \"graphql\": {\n            \"endpoint\": \"https://venia.magento.com/graphql\"\n          }\n        }\n      }\n    ]\n  }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`field`}</inlineCode>{` values are required when renaming a field `}<inlineCode parentName=\"p\">{`argument`}</inlineCode>{`.`}</p>\n    <p>{`You can use RegEx flags to enable the use of regular expressions when renaming using this transform. This way you can rename multiple types, fields, or both.`}</p>\n    <p>{`For example, you could use the key-value pair field: `}<inlineCode parentName=\"p\">{`Api(.*)`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{` object to rename any field of the corresponding type that begins with \"api\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`[\n  {\n    \"rename\": {\n      \"mode\": \"bare | wrap\",\n      \"renames\": [\n        {\n          \"from\": {\n            \"type\": \"Api(.*)\"\n          },\n          \"to\": {\n            \"type\": \"$1\"\n          },\n          \"useRegExpForTypes\": true\n        },\n        {\n          \"from\": {\n            \"type\": \"Query\",\n            \"field\": \"api(.*)\"\n          },\n          \"to\": {\n            \"type\": \"Query\",\n            \"field\": \"$1\"\n          },\n          \"useRegExpForFields\": true\n        }\n      ]\n    }\n  }\n]\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For information about `}<inlineCode parentName=\"p\">{`bare`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` modes, read the `}<a parentName=\"p\" {...{\n        \"href\": \"/graphql-mesh-gateway/reference/transforms/index.md#two-different-modes\"\n      }}>{`dedicated section`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"config-api-reference\"\n    }}>{`Config API Reference`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mode`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{` (`}<inlineCode parentName=\"li\">{`bare`}</inlineCode>{` | `}<inlineCode parentName=\"li\">{`wrap`}</inlineCode>{`)) - Specify to apply `}<inlineCode parentName=\"li\">{`rename`}</inlineCode>{` transforms to bare schema or by wrapping original schema`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`renames`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Array of Object`}</inlineCode>{`, required) - Array of `}<inlineCode parentName=\"li\">{`rename`}</inlineCode>{` rules:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`from`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`argument`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`to`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Object`}</inlineCode>{`, required):`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`field`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`argument`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`)`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useRegExpForTypes`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)  - Use Regular Expression for type names`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useRegExpForFields`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)  - Use Regular Expression for field names`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useRegExpForArguments`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`Boolean`}</inlineCode>{`)  - Use Regular Expression for field names`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`regExpFlags`}</inlineCode>{` (type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{`) - Flags to use in the Regular Expression`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}