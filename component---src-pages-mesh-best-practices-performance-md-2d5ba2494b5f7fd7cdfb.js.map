{"version":3,"file":"component---src-pages-mesh-best-practices-performance-md-2d5ba2494b5f7fd7cdfb.js","mappings":"8SASaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAI5E,eACE,GAAM,uBACH,wBACL,kBAAK,6KACL,kBAAK,iFAA+E,uBAAYC,WAAW,KAAM,uBAAoC,6EACrJ,kBAAK,sCAAoC,uBAAYA,WAAW,KAAM,0BAAuC,yBAAuB,cAAGA,WAAW,IAC9I,KAAQ,4DACL,oCAAwC,MAC/C,kBAAK,gOAA8N,uBAAYA,WAAW,KAAM,cAA2B,aAC3R,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,yBAAuB,uBAAYC,WAAW,KAAM,0BAAuC,0EAChG,kBAAK,6BAA2B,uBAAYA,WAAW,KAAM,cAA2B,gHACxF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBACV,mEAQP,eACE,GAAM,gCACH,iCACL,SAAC,IAAD,CAAaD,QAAQ,gBAGxB,CAEDF,EAAWM,gBAAiB,C","sources":["webpack://graphql-mesh-gateway/./src/pages/mesh/best-practices/performance.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/graphql-mesh-gateway/graphql-mesh-gateway/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Performance from '/src/_includes/performance-schedule.md';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"performance-testing\"\n    }}>{`Performance testing`}</h1>\n    <p>{`When performance testing edge meshes on API Mesh for Adobe Developer App Builder, you need to account for cold starts to get an accurate measurement of the performance.`}</p>\n    <p>{`If your mesh existed before the September 24, 2024 release, you must run the `}<inlineCode parentName=\"p\">{`aio api-mesh update`}</inlineCode>{` command on your edge mesh before you can benefit from this enhancement.`}</p>\n    <p>{`If applicable, you should use the `}<inlineCode parentName=\"p\">{`Connection: keep-alive`}</inlineCode>{` header described in `}<a parentName=\"p\" {...{\n        \"href\": \"../basic/create-mesh.md#optimizing-edge-mesh-performance\"\n      }}>{`Optimizing edge mesh performance`}</a>{`.`}</p>\n    <p>{`Additionally, you can prime your mesh by making several repeated calls to the mesh that do not make calls to your sources. This is also useful for increasing performance using cURL or other tools that do not support the `}<inlineCode parentName=\"p\">{`keep-alive`}</inlineCode>{` header.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you are using the `}<inlineCode parentName=\"p\">{`Connection: keep-alive`}</inlineCode>{` header, you only need to prime with one or two calls before testing.`}</p>\n    <p>{`If you are not using the `}<inlineCode parentName=\"p\">{`keep-alive`}</inlineCode>{` header, you can prime your mesh by repeating the following query 100-200 times before performance testing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  __schema {\n    queryType {\n      name\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"schedule-performance-testing\"\n    }}>{`Schedule performance testing`}</h2>\n    <Performance mdxType=\"Performance\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}